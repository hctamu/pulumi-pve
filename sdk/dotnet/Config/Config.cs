// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Pve
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("pve");

        private static readonly __Value<string?> _pveToken = new __Value<string?>(() => __config.Get("pveToken"));
        public static string? PveToken
        {
            get => _pveToken.Get();
            set => _pveToken.Set(value);
        }

        private static readonly __Value<string?> _pveUrl = new __Value<string?>(() => __config.Get("pveUrl"));
        public static string? PveUrl
        {
            get => _pveUrl.Get();
            set => _pveUrl.Set(value);
        }

        private static readonly __Value<string?> _pveUser = new __Value<string?>(() => __config.Get("pveUser"));
        public static string? PveUser
        {
            get => _pveUser.Get();
            set => _pveUser.Set(value);
        }

        private static readonly __Value<string?> _sshPass = new __Value<string?>(() => __config.Get("sshPass"));
        public static string? SshPass
        {
            get => _sshPass.Get();
            set => _sshPass.Set(value);
        }

        private static readonly __Value<string?> _sshUser = new __Value<string?>(() => __config.Get("sshUser"));
        public static string? SshUser
        {
            get => _sshUser.Get();
            set => _sshUser.Set(value);
        }

    }
}
