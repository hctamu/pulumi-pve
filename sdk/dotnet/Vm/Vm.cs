// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Hctamu.Pve.Vm
{
    [PveResourceType("pve:vm:Vm")]
    public partial class Vm : global::Pulumi.CustomResource
    {
        [Output("acpi")]
        public Output<int?> Acpi { get; private set; } = null!;

        [Output("affinity")]
        public Output<string?> Affinity { get; private set; } = null!;

        [Output("agent")]
        public Output<string?> Agent { get; private set; } = null!;

        [Output("audio0")]
        public Output<string?> Audio0 { get; private set; } = null!;

        [Output("autostart")]
        public Output<int?> Autostart { get; private set; } = null!;

        [Output("balloon")]
        public Output<int?> Balloon { get; private set; } = null!;

        [Output("bios")]
        public Output<string?> Bios { get; private set; } = null!;

        [Output("boot")]
        public Output<string?> Boot { get; private set; } = null!;

        [Output("cicustom")]
        public Output<string?> Cicustom { get; private set; } = null!;

        [Output("cipassword")]
        public Output<string?> Cipassword { get; private set; } = null!;

        [Output("citype")]
        public Output<string?> Citype { get; private set; } = null!;

        [Output("ciupgrade")]
        public Output<int?> Ciupgrade { get; private set; } = null!;

        [Output("ciuser")]
        public Output<string?> Ciuser { get; private set; } = null!;

        [Output("clone")]
        public Output<Outputs.VmClone?> Clone { get; private set; } = null!;

        [Output("cores")]
        public Output<int?> Cores { get; private set; } = null!;

        [Output("cpu")]
        public Output<string?> Cpu { get; private set; } = null!;

        [Output("cpulimit")]
        public Output<string?> Cpulimit { get; private set; } = null!;

        [Output("cpuunits")]
        public Output<int?> Cpuunits { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("digest")]
        public Output<string?> Digest { get; private set; } = null!;

        [Output("disks")]
        public Output<ImmutableArray<Outputs.Disk>> Disks { get; private set; } = null!;

        [Output("efidisk0")]
        public Output<string?> Efidisk0 { get; private set; } = null!;

        [Output("hookscript")]
        public Output<string?> Hookscript { get; private set; } = null!;

        [Output("hostpci0")]
        public Output<string?> Hostpci0 { get; private set; } = null!;

        [Output("hotplug")]
        public Output<string?> Hotplug { get; private set; } = null!;

        [Output("hugepages")]
        public Output<string?> Hugepages { get; private set; } = null!;

        [Output("ipconfig0")]
        public Output<string?> Ipconfig0 { get; private set; } = null!;

        [Output("kvm")]
        public Output<int?> Kvm { get; private set; } = null!;

        [Output("lock")]
        public Output<string?> Lock { get; private set; } = null!;

        [Output("machine")]
        public Output<string?> Machine { get; private set; } = null!;

        [Output("memory")]
        public Output<int?> Memory { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nameserver")]
        public Output<string?> Nameserver { get; private set; } = null!;

        [Output("net0")]
        public Output<string?> Net0 { get; private set; } = null!;

        [Output("node")]
        public Output<string?> Node { get; private set; } = null!;

        [Output("numa")]
        public Output<int?> Numa { get; private set; } = null!;

        [Output("numa0")]
        public Output<string?> Numa0 { get; private set; } = null!;

        [Output("onboot")]
        public Output<int?> Onboot { get; private set; } = null!;

        [Output("ostype")]
        public Output<string?> Ostype { get; private set; } = null!;

        [Output("parallel0")]
        public Output<string?> Parallel0 { get; private set; } = null!;

        [Output("protection")]
        public Output<int?> Protection { get; private set; } = null!;

        [Output("rng0")]
        public Output<string?> Rng0 { get; private set; } = null!;

        [Output("scsihw")]
        public Output<string?> Scsihw { get; private set; } = null!;

        [Output("searchdomain")]
        public Output<string?> Searchdomain { get; private set; } = null!;

        [Output("serial0")]
        public Output<string?> Serial0 { get; private set; } = null!;

        [Output("smbios1")]
        public Output<string?> Smbios1 { get; private set; } = null!;

        [Output("sockets")]
        public Output<int?> Sockets { get; private set; } = null!;

        [Output("sshkeys")]
        public Output<string?> Sshkeys { get; private set; } = null!;

        [Output("tablet")]
        public Output<int?> Tablet { get; private set; } = null!;

        [Output("tags")]
        public Output<string?> Tags { get; private set; } = null!;

        [Output("template")]
        public Output<int?> Template { get; private set; } = null!;

        [Output("tpmstate0")]
        public Output<string?> Tpmstate0 { get; private set; } = null!;

        [Output("usb0")]
        public Output<string?> Usb0 { get; private set; } = null!;

        [Output("vcpus")]
        public Output<int?> Vcpus { get; private set; } = null!;

        [Output("vga")]
        public Output<string?> Vga { get; private set; } = null!;

        [Output("vmId")]
        public Output<int?> VmId { get; private set; } = null!;


        /// <summary>
        /// Create a Vm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vm(string name, VmArgs args, CustomResourceOptions? options = null)
            : base("pve:vm:Vm", name, args ?? new VmArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vm(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("pve:vm:Vm", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vm Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Vm(name, id, options);
        }
    }

    public sealed class VmArgs : global::Pulumi.ResourceArgs
    {
        [Input("acpi")]
        public Input<int>? Acpi { get; set; }

        [Input("affinity")]
        public Input<string>? Affinity { get; set; }

        [Input("agent")]
        public Input<string>? Agent { get; set; }

        [Input("audio0")]
        public Input<string>? Audio0 { get; set; }

        [Input("autostart")]
        public Input<int>? Autostart { get; set; }

        [Input("balloon")]
        public Input<int>? Balloon { get; set; }

        [Input("bios")]
        public Input<string>? Bios { get; set; }

        [Input("boot")]
        public Input<string>? Boot { get; set; }

        [Input("cicustom")]
        public Input<string>? Cicustom { get; set; }

        [Input("cipassword")]
        public Input<string>? Cipassword { get; set; }

        [Input("citype")]
        public Input<string>? Citype { get; set; }

        [Input("ciupgrade")]
        public Input<int>? Ciupgrade { get; set; }

        [Input("ciuser")]
        public Input<string>? Ciuser { get; set; }

        [Input("clone")]
        public Input<Inputs.VmCloneArgs>? Clone { get; set; }

        [Input("cores")]
        public Input<int>? Cores { get; set; }

        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        [Input("cpulimit")]
        public Input<string>? Cpulimit { get; set; }

        [Input("cpuunits")]
        public Input<int>? Cpuunits { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("digest")]
        public Input<string>? Digest { get; set; }

        [Input("disks", required: true)]
        private InputList<Inputs.DiskArgs>? _disks;
        public InputList<Inputs.DiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.DiskArgs>());
            set => _disks = value;
        }

        [Input("efidisk0")]
        public Input<string>? Efidisk0 { get; set; }

        [Input("hookscript")]
        public Input<string>? Hookscript { get; set; }

        [Input("hostpci0")]
        public Input<string>? Hostpci0 { get; set; }

        [Input("hotplug")]
        public Input<string>? Hotplug { get; set; }

        [Input("hugepages")]
        public Input<string>? Hugepages { get; set; }

        [Input("ipconfig0")]
        public Input<string>? Ipconfig0 { get; set; }

        [Input("kvm")]
        public Input<int>? Kvm { get; set; }

        [Input("lock")]
        public Input<string>? Lock { get; set; }

        [Input("machine")]
        public Input<string>? Machine { get; set; }

        [Input("memory")]
        public Input<int>? Memory { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("nameserver")]
        public Input<string>? Nameserver { get; set; }

        [Input("net0")]
        public Input<string>? Net0 { get; set; }

        [Input("node")]
        public Input<string>? Node { get; set; }

        [Input("numa")]
        public Input<int>? Numa { get; set; }

        [Input("numa0")]
        public Input<string>? Numa0 { get; set; }

        [Input("onboot")]
        public Input<int>? Onboot { get; set; }

        [Input("ostype")]
        public Input<string>? Ostype { get; set; }

        [Input("parallel0")]
        public Input<string>? Parallel0 { get; set; }

        [Input("protection")]
        public Input<int>? Protection { get; set; }

        [Input("rng0")]
        public Input<string>? Rng0 { get; set; }

        [Input("scsihw")]
        public Input<string>? Scsihw { get; set; }

        [Input("searchdomain")]
        public Input<string>? Searchdomain { get; set; }

        [Input("serial0")]
        public Input<string>? Serial0 { get; set; }

        [Input("smbios1")]
        public Input<string>? Smbios1 { get; set; }

        [Input("sockets")]
        public Input<int>? Sockets { get; set; }

        [Input("sshkeys")]
        public Input<string>? Sshkeys { get; set; }

        [Input("tablet")]
        public Input<int>? Tablet { get; set; }

        [Input("tags")]
        public Input<string>? Tags { get; set; }

        [Input("template")]
        public Input<int>? Template { get; set; }

        [Input("tpmstate0")]
        public Input<string>? Tpmstate0 { get; set; }

        [Input("usb0")]
        public Input<string>? Usb0 { get; set; }

        [Input("vcpus")]
        public Input<int>? Vcpus { get; set; }

        [Input("vga")]
        public Input<string>? Vga { get; set; }

        [Input("vmId")]
        public Input<int>? VmId { get; set; }

        public VmArgs()
        {
            Cores = 1;
        }
        public static new VmArgs Empty => new VmArgs();
    }
}
