// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.github.hctamu.pve.vm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Disk {
    private @Nullable String filename;
    private String interface_;
    private Integer size;
    private String storage;

    private Disk() {}
    public Optional<String> filename() {
        return Optional.ofNullable(this.filename);
    }
    public String interface_() {
        return this.interface_;
    }
    public Integer size() {
        return this.size;
    }
    public String storage() {
        return this.storage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Disk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String filename;
        private String interface_;
        private Integer size;
        private String storage;
        public Builder() {}
        public Builder(Disk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filename = defaults.filename;
    	      this.interface_ = defaults.interface_;
    	      this.size = defaults.size;
    	      this.storage = defaults.storage;
        }

        @CustomType.Setter
        public Builder filename(@Nullable String filename) {

            this.filename = filename;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(String interface_) {
            if (interface_ == null) {
              throw new MissingRequiredPropertyException("Disk", "interface_");
            }
            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("Disk", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder storage(String storage) {
            if (storage == null) {
              throw new MissingRequiredPropertyException("Disk", "storage");
            }
            this.storage = storage;
            return this;
        }
        public Disk build() {
            final var _resultValue = new Disk();
            _resultValue.filename = filename;
            _resultValue.interface_ = interface_;
            _resultValue.size = size;
            _resultValue.storage = storage;
            return _resultValue;
        }
    }
}
