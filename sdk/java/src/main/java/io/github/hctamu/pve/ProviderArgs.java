// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.github.hctamu.pve;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    @Import(name="pveToken", required=true)
    private Output<String> pveToken;

    public Output<String> pveToken() {
        return this.pveToken;
    }

    @Import(name="pveUrl", required=true)
    private Output<String> pveUrl;

    public Output<String> pveUrl() {
        return this.pveUrl;
    }

    @Import(name="pveUser", required=true)
    private Output<String> pveUser;

    public Output<String> pveUser() {
        return this.pveUser;
    }

    @Import(name="sshPass", required=true)
    private Output<String> sshPass;

    public Output<String> sshPass() {
        return this.sshPass;
    }

    @Import(name="sshUser", required=true)
    private Output<String> sshUser;

    public Output<String> sshUser() {
        return this.sshUser;
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.pveToken = $.pveToken;
        this.pveUrl = $.pveUrl;
        this.pveUser = $.pveUser;
        this.sshPass = $.sshPass;
        this.sshUser = $.sshUser;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        public Builder pveToken(Output<String> pveToken) {
            $.pveToken = pveToken;
            return this;
        }

        public Builder pveToken(String pveToken) {
            return pveToken(Output.of(pveToken));
        }

        public Builder pveUrl(Output<String> pveUrl) {
            $.pveUrl = pveUrl;
            return this;
        }

        public Builder pveUrl(String pveUrl) {
            return pveUrl(Output.of(pveUrl));
        }

        public Builder pveUser(Output<String> pveUser) {
            $.pveUser = pveUser;
            return this;
        }

        public Builder pveUser(String pveUser) {
            return pveUser(Output.of(pveUser));
        }

        public Builder sshPass(Output<String> sshPass) {
            $.sshPass = sshPass;
            return this;
        }

        public Builder sshPass(String sshPass) {
            return sshPass(Output.of(sshPass));
        }

        public Builder sshUser(Output<String> sshUser) {
            $.sshUser = sshUser;
            return this;
        }

        public Builder sshUser(String sshUser) {
            return sshUser(Output.of(sshUser));
        }

        public ProviderArgs build() {
            if ($.pveToken == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "pveToken");
            }
            if ($.pveUrl == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "pveUrl");
            }
            if ($.pveUser == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "pveUser");
            }
            if ($.sshPass == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "sshPass");
            }
            if ($.sshUser == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "sshUser");
            }
            return $;
        }
    }

}
