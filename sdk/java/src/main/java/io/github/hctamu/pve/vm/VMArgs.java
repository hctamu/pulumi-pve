// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.github.hctamu.pve.vm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.github.hctamu.pve.vm.inputs.CloneArgs;
import io.github.hctamu.pve.vm.inputs.DiskArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VMArgs extends com.pulumi.resources.ResourceArgs {

    public static final VMArgs Empty = new VMArgs();

    @Import(name="acpi")
    private @Nullable Output<Integer> acpi;

    public Optional<Output<Integer>> acpi() {
        return Optional.ofNullable(this.acpi);
    }

    @Import(name="affinity")
    private @Nullable Output<String> affinity;

    public Optional<Output<String>> affinity() {
        return Optional.ofNullable(this.affinity);
    }

    @Import(name="agent")
    private @Nullable Output<String> agent;

    public Optional<Output<String>> agent() {
        return Optional.ofNullable(this.agent);
    }

    @Import(name="audio0")
    private @Nullable Output<String> audio0;

    public Optional<Output<String>> audio0() {
        return Optional.ofNullable(this.audio0);
    }

    @Import(name="autostart")
    private @Nullable Output<Integer> autostart;

    public Optional<Output<Integer>> autostart() {
        return Optional.ofNullable(this.autostart);
    }

    @Import(name="balloon")
    private @Nullable Output<Integer> balloon;

    public Optional<Output<Integer>> balloon() {
        return Optional.ofNullable(this.balloon);
    }

    @Import(name="bios")
    private @Nullable Output<String> bios;

    public Optional<Output<String>> bios() {
        return Optional.ofNullable(this.bios);
    }

    @Import(name="boot")
    private @Nullable Output<String> boot;

    public Optional<Output<String>> boot() {
        return Optional.ofNullable(this.boot);
    }

    @Import(name="cicustom")
    private @Nullable Output<String> cicustom;

    public Optional<Output<String>> cicustom() {
        return Optional.ofNullable(this.cicustom);
    }

    @Import(name="cipassword")
    private @Nullable Output<String> cipassword;

    public Optional<Output<String>> cipassword() {
        return Optional.ofNullable(this.cipassword);
    }

    @Import(name="citype")
    private @Nullable Output<String> citype;

    public Optional<Output<String>> citype() {
        return Optional.ofNullable(this.citype);
    }

    @Import(name="ciupgrade")
    private @Nullable Output<Integer> ciupgrade;

    public Optional<Output<Integer>> ciupgrade() {
        return Optional.ofNullable(this.ciupgrade);
    }

    @Import(name="ciuser")
    private @Nullable Output<String> ciuser;

    public Optional<Output<String>> ciuser() {
        return Optional.ofNullable(this.ciuser);
    }

    @Import(name="clone")
    private @Nullable Output<CloneArgs> clone;

    public Optional<Output<CloneArgs>> clone_() {
        return Optional.ofNullable(this.clone);
    }

    @Import(name="cores")
    private @Nullable Output<Integer> cores;

    public Optional<Output<Integer>> cores() {
        return Optional.ofNullable(this.cores);
    }

    @Import(name="cpu")
    private @Nullable Output<String> cpu;

    public Optional<Output<String>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    @Import(name="cpulimit")
    private @Nullable Output<String> cpulimit;

    public Optional<Output<String>> cpulimit() {
        return Optional.ofNullable(this.cpulimit);
    }

    @Import(name="cpuunits")
    private @Nullable Output<Integer> cpuunits;

    public Optional<Output<Integer>> cpuunits() {
        return Optional.ofNullable(this.cpuunits);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="digest")
    private @Nullable Output<String> digest;

    public Optional<Output<String>> digest() {
        return Optional.ofNullable(this.digest);
    }

    @Import(name="disks", required=true)
    private Output<List<DiskArgs>> disks;

    public Output<List<DiskArgs>> disks() {
        return this.disks;
    }

    @Import(name="efidisk0")
    private @Nullable Output<String> efidisk0;

    public Optional<Output<String>> efidisk0() {
        return Optional.ofNullable(this.efidisk0);
    }

    @Import(name="hookscript")
    private @Nullable Output<String> hookscript;

    public Optional<Output<String>> hookscript() {
        return Optional.ofNullable(this.hookscript);
    }

    @Import(name="hostpci0")
    private @Nullable Output<String> hostpci0;

    public Optional<Output<String>> hostpci0() {
        return Optional.ofNullable(this.hostpci0);
    }

    @Import(name="hotplug")
    private @Nullable Output<String> hotplug;

    public Optional<Output<String>> hotplug() {
        return Optional.ofNullable(this.hotplug);
    }

    @Import(name="hugepages")
    private @Nullable Output<String> hugepages;

    public Optional<Output<String>> hugepages() {
        return Optional.ofNullable(this.hugepages);
    }

    @Import(name="ipconfig0")
    private @Nullable Output<String> ipconfig0;

    public Optional<Output<String>> ipconfig0() {
        return Optional.ofNullable(this.ipconfig0);
    }

    @Import(name="kvm")
    private @Nullable Output<Integer> kvm;

    public Optional<Output<Integer>> kvm() {
        return Optional.ofNullable(this.kvm);
    }

    @Import(name="lock")
    private @Nullable Output<String> lock;

    public Optional<Output<String>> lock() {
        return Optional.ofNullable(this.lock);
    }

    @Import(name="machine")
    private @Nullable Output<String> machine;

    public Optional<Output<String>> machine() {
        return Optional.ofNullable(this.machine);
    }

    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="nameserver")
    private @Nullable Output<String> nameserver;

    public Optional<Output<String>> nameserver() {
        return Optional.ofNullable(this.nameserver);
    }

    @Import(name="net0")
    private @Nullable Output<String> net0;

    public Optional<Output<String>> net0() {
        return Optional.ofNullable(this.net0);
    }

    @Import(name="node")
    private @Nullable Output<String> node;

    public Optional<Output<String>> node() {
        return Optional.ofNullable(this.node);
    }

    @Import(name="numa")
    private @Nullable Output<Integer> numa;

    public Optional<Output<Integer>> numa() {
        return Optional.ofNullable(this.numa);
    }

    @Import(name="numa0")
    private @Nullable Output<String> numa0;

    public Optional<Output<String>> numa0() {
        return Optional.ofNullable(this.numa0);
    }

    @Import(name="onboot")
    private @Nullable Output<Integer> onboot;

    public Optional<Output<Integer>> onboot() {
        return Optional.ofNullable(this.onboot);
    }

    @Import(name="ostype")
    private @Nullable Output<String> ostype;

    public Optional<Output<String>> ostype() {
        return Optional.ofNullable(this.ostype);
    }

    @Import(name="parallel0")
    private @Nullable Output<String> parallel0;

    public Optional<Output<String>> parallel0() {
        return Optional.ofNullable(this.parallel0);
    }

    @Import(name="protection")
    private @Nullable Output<Integer> protection;

    public Optional<Output<Integer>> protection() {
        return Optional.ofNullable(this.protection);
    }

    @Import(name="rng0")
    private @Nullable Output<String> rng0;

    public Optional<Output<String>> rng0() {
        return Optional.ofNullable(this.rng0);
    }

    @Import(name="scsihw")
    private @Nullable Output<String> scsihw;

    public Optional<Output<String>> scsihw() {
        return Optional.ofNullable(this.scsihw);
    }

    @Import(name="searchdomain")
    private @Nullable Output<String> searchdomain;

    public Optional<Output<String>> searchdomain() {
        return Optional.ofNullable(this.searchdomain);
    }

    @Import(name="serial0")
    private @Nullable Output<String> serial0;

    public Optional<Output<String>> serial0() {
        return Optional.ofNullable(this.serial0);
    }

    @Import(name="smbios1")
    private @Nullable Output<String> smbios1;

    public Optional<Output<String>> smbios1() {
        return Optional.ofNullable(this.smbios1);
    }

    @Import(name="sockets")
    private @Nullable Output<Integer> sockets;

    public Optional<Output<Integer>> sockets() {
        return Optional.ofNullable(this.sockets);
    }

    @Import(name="sshkeys")
    private @Nullable Output<String> sshkeys;

    public Optional<Output<String>> sshkeys() {
        return Optional.ofNullable(this.sshkeys);
    }

    @Import(name="tablet")
    private @Nullable Output<Integer> tablet;

    public Optional<Output<Integer>> tablet() {
        return Optional.ofNullable(this.tablet);
    }

    @Import(name="tags")
    private @Nullable Output<String> tags;

    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="template")
    private @Nullable Output<Integer> template;

    public Optional<Output<Integer>> template() {
        return Optional.ofNullable(this.template);
    }

    @Import(name="tpmstate0")
    private @Nullable Output<String> tpmstate0;

    public Optional<Output<String>> tpmstate0() {
        return Optional.ofNullable(this.tpmstate0);
    }

    @Import(name="usb0")
    private @Nullable Output<String> usb0;

    public Optional<Output<String>> usb0() {
        return Optional.ofNullable(this.usb0);
    }

    @Import(name="vcpus")
    private @Nullable Output<Integer> vcpus;

    public Optional<Output<Integer>> vcpus() {
        return Optional.ofNullable(this.vcpus);
    }

    @Import(name="vga")
    private @Nullable Output<String> vga;

    public Optional<Output<String>> vga() {
        return Optional.ofNullable(this.vga);
    }

    @Import(name="vmId")
    private @Nullable Output<Integer> vmId;

    public Optional<Output<Integer>> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    private VMArgs() {}

    private VMArgs(VMArgs $) {
        this.acpi = $.acpi;
        this.affinity = $.affinity;
        this.agent = $.agent;
        this.audio0 = $.audio0;
        this.autostart = $.autostart;
        this.balloon = $.balloon;
        this.bios = $.bios;
        this.boot = $.boot;
        this.cicustom = $.cicustom;
        this.cipassword = $.cipassword;
        this.citype = $.citype;
        this.ciupgrade = $.ciupgrade;
        this.ciuser = $.ciuser;
        this.clone = $.clone;
        this.cores = $.cores;
        this.cpu = $.cpu;
        this.cpulimit = $.cpulimit;
        this.cpuunits = $.cpuunits;
        this.description = $.description;
        this.digest = $.digest;
        this.disks = $.disks;
        this.efidisk0 = $.efidisk0;
        this.hookscript = $.hookscript;
        this.hostpci0 = $.hostpci0;
        this.hotplug = $.hotplug;
        this.hugepages = $.hugepages;
        this.ipconfig0 = $.ipconfig0;
        this.kvm = $.kvm;
        this.lock = $.lock;
        this.machine = $.machine;
        this.memory = $.memory;
        this.name = $.name;
        this.nameserver = $.nameserver;
        this.net0 = $.net0;
        this.node = $.node;
        this.numa = $.numa;
        this.numa0 = $.numa0;
        this.onboot = $.onboot;
        this.ostype = $.ostype;
        this.parallel0 = $.parallel0;
        this.protection = $.protection;
        this.rng0 = $.rng0;
        this.scsihw = $.scsihw;
        this.searchdomain = $.searchdomain;
        this.serial0 = $.serial0;
        this.smbios1 = $.smbios1;
        this.sockets = $.sockets;
        this.sshkeys = $.sshkeys;
        this.tablet = $.tablet;
        this.tags = $.tags;
        this.template = $.template;
        this.tpmstate0 = $.tpmstate0;
        this.usb0 = $.usb0;
        this.vcpus = $.vcpus;
        this.vga = $.vga;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMArgs $;

        public Builder() {
            $ = new VMArgs();
        }

        public Builder(VMArgs defaults) {
            $ = new VMArgs(Objects.requireNonNull(defaults));
        }

        public Builder acpi(@Nullable Output<Integer> acpi) {
            $.acpi = acpi;
            return this;
        }

        public Builder acpi(Integer acpi) {
            return acpi(Output.of(acpi));
        }

        public Builder affinity(@Nullable Output<String> affinity) {
            $.affinity = affinity;
            return this;
        }

        public Builder affinity(String affinity) {
            return affinity(Output.of(affinity));
        }

        public Builder agent(@Nullable Output<String> agent) {
            $.agent = agent;
            return this;
        }

        public Builder agent(String agent) {
            return agent(Output.of(agent));
        }

        public Builder audio0(@Nullable Output<String> audio0) {
            $.audio0 = audio0;
            return this;
        }

        public Builder audio0(String audio0) {
            return audio0(Output.of(audio0));
        }

        public Builder autostart(@Nullable Output<Integer> autostart) {
            $.autostart = autostart;
            return this;
        }

        public Builder autostart(Integer autostart) {
            return autostart(Output.of(autostart));
        }

        public Builder balloon(@Nullable Output<Integer> balloon) {
            $.balloon = balloon;
            return this;
        }

        public Builder balloon(Integer balloon) {
            return balloon(Output.of(balloon));
        }

        public Builder bios(@Nullable Output<String> bios) {
            $.bios = bios;
            return this;
        }

        public Builder bios(String bios) {
            return bios(Output.of(bios));
        }

        public Builder boot(@Nullable Output<String> boot) {
            $.boot = boot;
            return this;
        }

        public Builder boot(String boot) {
            return boot(Output.of(boot));
        }

        public Builder cicustom(@Nullable Output<String> cicustom) {
            $.cicustom = cicustom;
            return this;
        }

        public Builder cicustom(String cicustom) {
            return cicustom(Output.of(cicustom));
        }

        public Builder cipassword(@Nullable Output<String> cipassword) {
            $.cipassword = cipassword;
            return this;
        }

        public Builder cipassword(String cipassword) {
            return cipassword(Output.of(cipassword));
        }

        public Builder citype(@Nullable Output<String> citype) {
            $.citype = citype;
            return this;
        }

        public Builder citype(String citype) {
            return citype(Output.of(citype));
        }

        public Builder ciupgrade(@Nullable Output<Integer> ciupgrade) {
            $.ciupgrade = ciupgrade;
            return this;
        }

        public Builder ciupgrade(Integer ciupgrade) {
            return ciupgrade(Output.of(ciupgrade));
        }

        public Builder ciuser(@Nullable Output<String> ciuser) {
            $.ciuser = ciuser;
            return this;
        }

        public Builder ciuser(String ciuser) {
            return ciuser(Output.of(ciuser));
        }

        public Builder clone_(@Nullable Output<CloneArgs> clone) {
            $.clone = clone;
            return this;
        }

        public Builder clone_(CloneArgs clone) {
            return clone_(Output.of(clone));
        }

        public Builder cores(@Nullable Output<Integer> cores) {
            $.cores = cores;
            return this;
        }

        public Builder cores(Integer cores) {
            return cores(Output.of(cores));
        }

        public Builder cpu(@Nullable Output<String> cpu) {
            $.cpu = cpu;
            return this;
        }

        public Builder cpu(String cpu) {
            return cpu(Output.of(cpu));
        }

        public Builder cpulimit(@Nullable Output<String> cpulimit) {
            $.cpulimit = cpulimit;
            return this;
        }

        public Builder cpulimit(String cpulimit) {
            return cpulimit(Output.of(cpulimit));
        }

        public Builder cpuunits(@Nullable Output<Integer> cpuunits) {
            $.cpuunits = cpuunits;
            return this;
        }

        public Builder cpuunits(Integer cpuunits) {
            return cpuunits(Output.of(cpuunits));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder digest(@Nullable Output<String> digest) {
            $.digest = digest;
            return this;
        }

        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        public Builder disks(Output<List<DiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        public Builder disks(List<DiskArgs> disks) {
            return disks(Output.of(disks));
        }

        public Builder disks(DiskArgs... disks) {
            return disks(List.of(disks));
        }

        public Builder efidisk0(@Nullable Output<String> efidisk0) {
            $.efidisk0 = efidisk0;
            return this;
        }

        public Builder efidisk0(String efidisk0) {
            return efidisk0(Output.of(efidisk0));
        }

        public Builder hookscript(@Nullable Output<String> hookscript) {
            $.hookscript = hookscript;
            return this;
        }

        public Builder hookscript(String hookscript) {
            return hookscript(Output.of(hookscript));
        }

        public Builder hostpci0(@Nullable Output<String> hostpci0) {
            $.hostpci0 = hostpci0;
            return this;
        }

        public Builder hostpci0(String hostpci0) {
            return hostpci0(Output.of(hostpci0));
        }

        public Builder hotplug(@Nullable Output<String> hotplug) {
            $.hotplug = hotplug;
            return this;
        }

        public Builder hotplug(String hotplug) {
            return hotplug(Output.of(hotplug));
        }

        public Builder hugepages(@Nullable Output<String> hugepages) {
            $.hugepages = hugepages;
            return this;
        }

        public Builder hugepages(String hugepages) {
            return hugepages(Output.of(hugepages));
        }

        public Builder ipconfig0(@Nullable Output<String> ipconfig0) {
            $.ipconfig0 = ipconfig0;
            return this;
        }

        public Builder ipconfig0(String ipconfig0) {
            return ipconfig0(Output.of(ipconfig0));
        }

        public Builder kvm(@Nullable Output<Integer> kvm) {
            $.kvm = kvm;
            return this;
        }

        public Builder kvm(Integer kvm) {
            return kvm(Output.of(kvm));
        }

        public Builder lock(@Nullable Output<String> lock) {
            $.lock = lock;
            return this;
        }

        public Builder lock(String lock) {
            return lock(Output.of(lock));
        }

        public Builder machine(@Nullable Output<String> machine) {
            $.machine = machine;
            return this;
        }

        public Builder machine(String machine) {
            return machine(Output.of(machine));
        }

        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nameserver(@Nullable Output<String> nameserver) {
            $.nameserver = nameserver;
            return this;
        }

        public Builder nameserver(String nameserver) {
            return nameserver(Output.of(nameserver));
        }

        public Builder net0(@Nullable Output<String> net0) {
            $.net0 = net0;
            return this;
        }

        public Builder net0(String net0) {
            return net0(Output.of(net0));
        }

        public Builder node(@Nullable Output<String> node) {
            $.node = node;
            return this;
        }

        public Builder node(String node) {
            return node(Output.of(node));
        }

        public Builder numa(@Nullable Output<Integer> numa) {
            $.numa = numa;
            return this;
        }

        public Builder numa(Integer numa) {
            return numa(Output.of(numa));
        }

        public Builder numa0(@Nullable Output<String> numa0) {
            $.numa0 = numa0;
            return this;
        }

        public Builder numa0(String numa0) {
            return numa0(Output.of(numa0));
        }

        public Builder onboot(@Nullable Output<Integer> onboot) {
            $.onboot = onboot;
            return this;
        }

        public Builder onboot(Integer onboot) {
            return onboot(Output.of(onboot));
        }

        public Builder ostype(@Nullable Output<String> ostype) {
            $.ostype = ostype;
            return this;
        }

        public Builder ostype(String ostype) {
            return ostype(Output.of(ostype));
        }

        public Builder parallel0(@Nullable Output<String> parallel0) {
            $.parallel0 = parallel0;
            return this;
        }

        public Builder parallel0(String parallel0) {
            return parallel0(Output.of(parallel0));
        }

        public Builder protection(@Nullable Output<Integer> protection) {
            $.protection = protection;
            return this;
        }

        public Builder protection(Integer protection) {
            return protection(Output.of(protection));
        }

        public Builder rng0(@Nullable Output<String> rng0) {
            $.rng0 = rng0;
            return this;
        }

        public Builder rng0(String rng0) {
            return rng0(Output.of(rng0));
        }

        public Builder scsihw(@Nullable Output<String> scsihw) {
            $.scsihw = scsihw;
            return this;
        }

        public Builder scsihw(String scsihw) {
            return scsihw(Output.of(scsihw));
        }

        public Builder searchdomain(@Nullable Output<String> searchdomain) {
            $.searchdomain = searchdomain;
            return this;
        }

        public Builder searchdomain(String searchdomain) {
            return searchdomain(Output.of(searchdomain));
        }

        public Builder serial0(@Nullable Output<String> serial0) {
            $.serial0 = serial0;
            return this;
        }

        public Builder serial0(String serial0) {
            return serial0(Output.of(serial0));
        }

        public Builder smbios1(@Nullable Output<String> smbios1) {
            $.smbios1 = smbios1;
            return this;
        }

        public Builder smbios1(String smbios1) {
            return smbios1(Output.of(smbios1));
        }

        public Builder sockets(@Nullable Output<Integer> sockets) {
            $.sockets = sockets;
            return this;
        }

        public Builder sockets(Integer sockets) {
            return sockets(Output.of(sockets));
        }

        public Builder sshkeys(@Nullable Output<String> sshkeys) {
            $.sshkeys = sshkeys;
            return this;
        }

        public Builder sshkeys(String sshkeys) {
            return sshkeys(Output.of(sshkeys));
        }

        public Builder tablet(@Nullable Output<Integer> tablet) {
            $.tablet = tablet;
            return this;
        }

        public Builder tablet(Integer tablet) {
            return tablet(Output.of(tablet));
        }

        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        public Builder template(@Nullable Output<Integer> template) {
            $.template = template;
            return this;
        }

        public Builder template(Integer template) {
            return template(Output.of(template));
        }

        public Builder tpmstate0(@Nullable Output<String> tpmstate0) {
            $.tpmstate0 = tpmstate0;
            return this;
        }

        public Builder tpmstate0(String tpmstate0) {
            return tpmstate0(Output.of(tpmstate0));
        }

        public Builder usb0(@Nullable Output<String> usb0) {
            $.usb0 = usb0;
            return this;
        }

        public Builder usb0(String usb0) {
            return usb0(Output.of(usb0));
        }

        public Builder vcpus(@Nullable Output<Integer> vcpus) {
            $.vcpus = vcpus;
            return this;
        }

        public Builder vcpus(Integer vcpus) {
            return vcpus(Output.of(vcpus));
        }

        public Builder vga(@Nullable Output<String> vga) {
            $.vga = vga;
            return this;
        }

        public Builder vga(String vga) {
            return vga(Output.of(vga));
        }

        public Builder vmId(@Nullable Output<Integer> vmId) {
            $.vmId = vmId;
            return this;
        }

        public Builder vmId(Integer vmId) {
            return vmId(Output.of(vmId));
        }

        public VMArgs build() {
            $.cores = Codegen.integerProp("cores").output().arg($.cores).def(1).getNullable();
            if ($.disks == null) {
                throw new MissingRequiredPropertyException("VMArgs", "disks");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("VMArgs", "name");
            }
            return $;
        }
    }

}
