// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pve.vm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskArgs Empty = new DiskArgs();

    @Import(name="filename")
    private @Nullable Output<String> filename;

    public Optional<Output<String>> filename() {
        return Optional.ofNullable(this.filename);
    }

    @Import(name="interface", required=true)
    private Output<String> interface_;

    public Output<String> interface_() {
        return this.interface_;
    }

    @Import(name="size", required=true)
    private Output<Integer> size;

    public Output<Integer> size() {
        return this.size;
    }

    @Import(name="storage", required=true)
    private Output<String> storage;

    public Output<String> storage() {
        return this.storage;
    }

    private DiskArgs() {}

    private DiskArgs(DiskArgs $) {
        this.filename = $.filename;
        this.interface_ = $.interface_;
        this.size = $.size;
        this.storage = $.storage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskArgs $;

        public Builder() {
            $ = new DiskArgs();
        }

        public Builder(DiskArgs defaults) {
            $ = new DiskArgs(Objects.requireNonNull(defaults));
        }

        public Builder filename(@Nullable Output<String> filename) {
            $.filename = filename;
            return this;
        }

        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        public Builder interface_(Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public Builder storage(Output<String> storage) {
            $.storage = storage;
            return this;
        }

        public Builder storage(String storage) {
            return storage(Output.of(storage));
        }

        public DiskArgs build() {
            if ($.interface_ == null) {
                throw new MissingRequiredPropertyException("DiskArgs", "interface_");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("DiskArgs", "size");
            }
            if ($.storage == null) {
                throw new MissingRequiredPropertyException("DiskArgs", "storage");
            }
            return $;
        }
    }

}
