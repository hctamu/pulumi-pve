// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.hctamu.pve.ha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HaArgs extends com.pulumi.resources.ResourceArgs {

    public static final HaArgs Empty = new HaArgs();

    /**
     * The HA group identifier.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return The HA group identifier.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * The ID of the virtual machine that will be managed by HA (required).
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<Integer> resourceId;

    /**
     * @return The ID of the virtual machine that will be managed by HA (required).
     * 
     */
    public Output<Integer> resourceId() {
        return this.resourceId;
    }

    /**
     * The state of the HA resource (default: started).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the HA resource (default: started).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private HaArgs() {}

    private HaArgs(HaArgs $) {
        this.group = $.group;
        this.resourceId = $.resourceId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HaArgs $;

        public Builder() {
            $ = new HaArgs();
        }

        public Builder(HaArgs defaults) {
            $ = new HaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param group The HA group identifier.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The HA group identifier.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param resourceId The ID of the virtual machine that will be managed by HA (required).
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<Integer> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID of the virtual machine that will be managed by HA (required).
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Integer resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param state The state of the HA resource (default: started).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the HA resource (default: started).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public HaArgs build() {
            if ($.resourceId == null) {
                throw new MissingRequiredPropertyException("HaArgs", "resourceId");
            }
            $.state = Codegen.stringProp("state").output().arg($.state).def("started").getNullable();
            return $;
        }
    }

}
