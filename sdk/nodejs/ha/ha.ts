// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A Proxmox HA resource that manages the HA configuration of a virtual machine in the Proxmox VE.
 */
export class Ha extends pulumi.CustomResource {
    /**
     * Get an existing Ha resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Ha {
        return new Ha(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pve:ha:Ha';

    /**
     * Returns true if the given object is an instance of Ha.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ha {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ha.__pulumiType;
    }

    /**
     * The HA group identifier.
     */
    declare public readonly group: pulumi.Output<string | undefined>;
    /**
     * The ID of the virtual machine that will be managed by HA (required).
     */
    declare public readonly resourceId: pulumi.Output<number>;
    /**
     * The state of the HA resource (default: started).
     */
    declare public readonly state: pulumi.Output<string | undefined>;

    /**
     * Create a Ha resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HaArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["group"] = args?.group;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["state"] = (args?.state) ?? "started";
        } else {
            resourceInputs["group"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ha.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Ha resource.
 */
export interface HaArgs {
    /**
     * The HA group identifier.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of the virtual machine that will be managed by HA (required).
     */
    resourceId: pulumi.Input<number>;
    /**
     * The state of the HA resource (default: started).
     */
    state?: pulumi.Input<string>;
}
