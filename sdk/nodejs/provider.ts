// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'pve';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    declare public readonly pveToken: pulumi.Output<string>;
    declare public readonly pveUrl: pulumi.Output<string>;
    declare public readonly pveUser: pulumi.Output<string>;
    declare public readonly sshPass: pulumi.Output<string>;
    declare public readonly sshUser: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if (args?.pveToken === undefined && !opts.urn) {
                throw new Error("Missing required property 'pveToken'");
            }
            if (args?.pveUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'pveUrl'");
            }
            if (args?.pveUser === undefined && !opts.urn) {
                throw new Error("Missing required property 'pveUser'");
            }
            if (args?.sshPass === undefined && !opts.urn) {
                throw new Error("Missing required property 'sshPass'");
            }
            if (args?.sshUser === undefined && !opts.urn) {
                throw new Error("Missing required property 'sshUser'");
            }
            resourceInputs["pveToken"] = args?.pveToken ? pulumi.secret(args.pveToken) : undefined;
            resourceInputs["pveUrl"] = args?.pveUrl;
            resourceInputs["pveUser"] = args?.pveUser;
            resourceInputs["sshPass"] = args?.sshPass ? pulumi.secret(args.sshPass) : undefined;
            resourceInputs["sshUser"] = args?.sshUser;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["pveToken", "sshPass"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    pveToken: pulumi.Input<string>;
    pveUrl: pulumi.Input<string>;
    pveUser: pulumi.Input<string>;
    sshPass: pulumi.Input<string>;
    sshUser: pulumi.Input<string>;
}
