// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class VM extends pulumi.CustomResource {
    /**
     * Get an existing VM resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VM {
        return new VM(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pve:vm:VM';

    /**
     * Returns true if the given object is an instance of VM.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VM {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VM.__pulumiType;
    }

    declare public readonly acpi: pulumi.Output<number | undefined>;
    declare public readonly affinity: pulumi.Output<string | undefined>;
    declare public readonly agent: pulumi.Output<string | undefined>;
    declare public readonly audio0: pulumi.Output<string | undefined>;
    declare public readonly autostart: pulumi.Output<number | undefined>;
    declare public readonly balloon: pulumi.Output<number | undefined>;
    declare public readonly bios: pulumi.Output<string | undefined>;
    declare public readonly boot: pulumi.Output<string | undefined>;
    declare public readonly cicustom: pulumi.Output<string | undefined>;
    declare public readonly cipassword: pulumi.Output<string | undefined>;
    declare public readonly citype: pulumi.Output<string | undefined>;
    declare public readonly ciupgrade: pulumi.Output<number | undefined>;
    declare public readonly ciuser: pulumi.Output<string | undefined>;
    declare public readonly clone: pulumi.Output<outputs.vm.Clone | undefined>;
    declare public readonly cores: pulumi.Output<number | undefined>;
    declare public readonly cpu: pulumi.Output<string | undefined>;
    declare public readonly cpulimit: pulumi.Output<string | undefined>;
    declare public readonly cpuunits: pulumi.Output<number | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly digest: pulumi.Output<string | undefined>;
    declare public readonly disks: pulumi.Output<outputs.vm.Disk[]>;
    declare public readonly efidisk0: pulumi.Output<string | undefined>;
    declare public readonly hookscript: pulumi.Output<string | undefined>;
    declare public readonly hostpci0: pulumi.Output<string | undefined>;
    declare public readonly hotplug: pulumi.Output<string | undefined>;
    declare public readonly hugepages: pulumi.Output<string | undefined>;
    declare public readonly ipconfig0: pulumi.Output<string | undefined>;
    declare public readonly kvm: pulumi.Output<number | undefined>;
    declare public readonly lock: pulumi.Output<string | undefined>;
    declare public readonly machine: pulumi.Output<string | undefined>;
    declare public readonly memory: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly nameserver: pulumi.Output<string | undefined>;
    declare public readonly net0: pulumi.Output<string | undefined>;
    declare public readonly node: pulumi.Output<string | undefined>;
    declare public readonly numa: pulumi.Output<number | undefined>;
    declare public readonly numa0: pulumi.Output<string | undefined>;
    declare public readonly onboot: pulumi.Output<number | undefined>;
    declare public readonly ostype: pulumi.Output<string | undefined>;
    declare public readonly parallel0: pulumi.Output<string | undefined>;
    declare public readonly protection: pulumi.Output<number | undefined>;
    declare public readonly rng0: pulumi.Output<string | undefined>;
    declare public readonly scsihw: pulumi.Output<string | undefined>;
    declare public readonly searchdomain: pulumi.Output<string | undefined>;
    declare public readonly serial0: pulumi.Output<string | undefined>;
    declare public readonly smbios1: pulumi.Output<string | undefined>;
    declare public readonly sockets: pulumi.Output<number | undefined>;
    declare public readonly sshkeys: pulumi.Output<string | undefined>;
    declare public readonly tablet: pulumi.Output<number | undefined>;
    declare public readonly tags: pulumi.Output<string | undefined>;
    declare public readonly template: pulumi.Output<number | undefined>;
    declare public readonly tpmstate0: pulumi.Output<string | undefined>;
    declare public readonly usb0: pulumi.Output<string | undefined>;
    declare public readonly vcpus: pulumi.Output<number | undefined>;
    declare public readonly vga: pulumi.Output<string | undefined>;
    declare public readonly vmId: pulumi.Output<number | undefined>;

    /**
     * Create a VM resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VMArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.disks === undefined && !opts.urn) {
                throw new Error("Missing required property 'disks'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["acpi"] = args?.acpi;
            resourceInputs["affinity"] = args?.affinity;
            resourceInputs["agent"] = args?.agent;
            resourceInputs["audio0"] = args?.audio0;
            resourceInputs["autostart"] = args?.autostart;
            resourceInputs["balloon"] = args?.balloon;
            resourceInputs["bios"] = args?.bios;
            resourceInputs["boot"] = args?.boot;
            resourceInputs["cicustom"] = args?.cicustom;
            resourceInputs["cipassword"] = args?.cipassword;
            resourceInputs["citype"] = args?.citype;
            resourceInputs["ciupgrade"] = args?.ciupgrade;
            resourceInputs["ciuser"] = args?.ciuser;
            resourceInputs["clone"] = args?.clone;
            resourceInputs["cores"] = (args?.cores) ?? 1;
            resourceInputs["cpu"] = args?.cpu;
            resourceInputs["cpulimit"] = args?.cpulimit;
            resourceInputs["cpuunits"] = args?.cpuunits;
            resourceInputs["description"] = args?.description;
            resourceInputs["digest"] = args?.digest;
            resourceInputs["disks"] = args?.disks;
            resourceInputs["efidisk0"] = args?.efidisk0;
            resourceInputs["hookscript"] = args?.hookscript;
            resourceInputs["hostpci0"] = args?.hostpci0;
            resourceInputs["hotplug"] = args?.hotplug;
            resourceInputs["hugepages"] = args?.hugepages;
            resourceInputs["ipconfig0"] = args?.ipconfig0;
            resourceInputs["kvm"] = args?.kvm;
            resourceInputs["lock"] = args?.lock;
            resourceInputs["machine"] = args?.machine;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameserver"] = args?.nameserver;
            resourceInputs["net0"] = args?.net0;
            resourceInputs["node"] = args?.node;
            resourceInputs["numa"] = args?.numa;
            resourceInputs["numa0"] = args?.numa0;
            resourceInputs["onboot"] = args?.onboot;
            resourceInputs["ostype"] = args?.ostype;
            resourceInputs["parallel0"] = args?.parallel0;
            resourceInputs["protection"] = args?.protection;
            resourceInputs["rng0"] = args?.rng0;
            resourceInputs["scsihw"] = args?.scsihw;
            resourceInputs["searchdomain"] = args?.searchdomain;
            resourceInputs["serial0"] = args?.serial0;
            resourceInputs["smbios1"] = args?.smbios1;
            resourceInputs["sockets"] = args?.sockets;
            resourceInputs["sshkeys"] = args?.sshkeys;
            resourceInputs["tablet"] = args?.tablet;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["template"] = args?.template;
            resourceInputs["tpmstate0"] = args?.tpmstate0;
            resourceInputs["usb0"] = args?.usb0;
            resourceInputs["vcpus"] = args?.vcpus;
            resourceInputs["vga"] = args?.vga;
            resourceInputs["vmId"] = args?.vmId;
        } else {
            resourceInputs["acpi"] = undefined /*out*/;
            resourceInputs["affinity"] = undefined /*out*/;
            resourceInputs["agent"] = undefined /*out*/;
            resourceInputs["audio0"] = undefined /*out*/;
            resourceInputs["autostart"] = undefined /*out*/;
            resourceInputs["balloon"] = undefined /*out*/;
            resourceInputs["bios"] = undefined /*out*/;
            resourceInputs["boot"] = undefined /*out*/;
            resourceInputs["cicustom"] = undefined /*out*/;
            resourceInputs["cipassword"] = undefined /*out*/;
            resourceInputs["citype"] = undefined /*out*/;
            resourceInputs["ciupgrade"] = undefined /*out*/;
            resourceInputs["ciuser"] = undefined /*out*/;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["cores"] = undefined /*out*/;
            resourceInputs["cpu"] = undefined /*out*/;
            resourceInputs["cpulimit"] = undefined /*out*/;
            resourceInputs["cpuunits"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["digest"] = undefined /*out*/;
            resourceInputs["disks"] = undefined /*out*/;
            resourceInputs["efidisk0"] = undefined /*out*/;
            resourceInputs["hookscript"] = undefined /*out*/;
            resourceInputs["hostpci0"] = undefined /*out*/;
            resourceInputs["hotplug"] = undefined /*out*/;
            resourceInputs["hugepages"] = undefined /*out*/;
            resourceInputs["ipconfig0"] = undefined /*out*/;
            resourceInputs["kvm"] = undefined /*out*/;
            resourceInputs["lock"] = undefined /*out*/;
            resourceInputs["machine"] = undefined /*out*/;
            resourceInputs["memory"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nameserver"] = undefined /*out*/;
            resourceInputs["net0"] = undefined /*out*/;
            resourceInputs["node"] = undefined /*out*/;
            resourceInputs["numa"] = undefined /*out*/;
            resourceInputs["numa0"] = undefined /*out*/;
            resourceInputs["onboot"] = undefined /*out*/;
            resourceInputs["ostype"] = undefined /*out*/;
            resourceInputs["parallel0"] = undefined /*out*/;
            resourceInputs["protection"] = undefined /*out*/;
            resourceInputs["rng0"] = undefined /*out*/;
            resourceInputs["scsihw"] = undefined /*out*/;
            resourceInputs["searchdomain"] = undefined /*out*/;
            resourceInputs["serial0"] = undefined /*out*/;
            resourceInputs["smbios1"] = undefined /*out*/;
            resourceInputs["sockets"] = undefined /*out*/;
            resourceInputs["sshkeys"] = undefined /*out*/;
            resourceInputs["tablet"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["template"] = undefined /*out*/;
            resourceInputs["tpmstate0"] = undefined /*out*/;
            resourceInputs["usb0"] = undefined /*out*/;
            resourceInputs["vcpus"] = undefined /*out*/;
            resourceInputs["vga"] = undefined /*out*/;
            resourceInputs["vmId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VM.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VM resource.
 */
export interface VMArgs {
    acpi?: pulumi.Input<number>;
    affinity?: pulumi.Input<string>;
    agent?: pulumi.Input<string>;
    audio0?: pulumi.Input<string>;
    autostart?: pulumi.Input<number>;
    balloon?: pulumi.Input<number>;
    bios?: pulumi.Input<string>;
    boot?: pulumi.Input<string>;
    cicustom?: pulumi.Input<string>;
    cipassword?: pulumi.Input<string>;
    citype?: pulumi.Input<string>;
    ciupgrade?: pulumi.Input<number>;
    ciuser?: pulumi.Input<string>;
    clone?: pulumi.Input<inputs.vm.CloneArgs>;
    cores?: pulumi.Input<number>;
    cpu?: pulumi.Input<string>;
    cpulimit?: pulumi.Input<string>;
    cpuunits?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    digest?: pulumi.Input<string>;
    disks: pulumi.Input<pulumi.Input<inputs.vm.DiskArgs>[]>;
    efidisk0?: pulumi.Input<string>;
    hookscript?: pulumi.Input<string>;
    hostpci0?: pulumi.Input<string>;
    hotplug?: pulumi.Input<string>;
    hugepages?: pulumi.Input<string>;
    ipconfig0?: pulumi.Input<string>;
    kvm?: pulumi.Input<number>;
    lock?: pulumi.Input<string>;
    machine?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    nameserver?: pulumi.Input<string>;
    net0?: pulumi.Input<string>;
    node?: pulumi.Input<string>;
    numa?: pulumi.Input<number>;
    numa0?: pulumi.Input<string>;
    onboot?: pulumi.Input<number>;
    ostype?: pulumi.Input<string>;
    parallel0?: pulumi.Input<string>;
    protection?: pulumi.Input<number>;
    rng0?: pulumi.Input<string>;
    scsihw?: pulumi.Input<string>;
    searchdomain?: pulumi.Input<string>;
    serial0?: pulumi.Input<string>;
    smbios1?: pulumi.Input<string>;
    sockets?: pulumi.Input<number>;
    sshkeys?: pulumi.Input<string>;
    tablet?: pulumi.Input<number>;
    tags?: pulumi.Input<string>;
    template?: pulumi.Input<number>;
    tpmstate0?: pulumi.Input<string>;
    usb0?: pulumi.Input<string>;
    vcpus?: pulumi.Input<number>;
    vga?: pulumi.Input<string>;
    vmId?: pulumi.Input<number>;
}
