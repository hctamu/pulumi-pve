// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Vm extends pulumi.CustomResource {
    /**
     * Get an existing Vm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Vm {
        return new Vm(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pve:vm:Vm';

    /**
     * Returns true if the given object is an instance of Vm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vm.__pulumiType;
    }

    public readonly acpi!: pulumi.Output<number | undefined>;
    public readonly affinity!: pulumi.Output<string | undefined>;
    public readonly agent!: pulumi.Output<string | undefined>;
    public readonly audio0!: pulumi.Output<string | undefined>;
    public readonly autostart!: pulumi.Output<number | undefined>;
    public readonly balloon!: pulumi.Output<number | undefined>;
    public readonly bios!: pulumi.Output<string | undefined>;
    public readonly boot!: pulumi.Output<string | undefined>;
    public readonly cicustom!: pulumi.Output<string | undefined>;
    public readonly cipassword!: pulumi.Output<string | undefined>;
    public readonly citype!: pulumi.Output<string | undefined>;
    public readonly ciupgrade!: pulumi.Output<number | undefined>;
    public readonly ciuser!: pulumi.Output<string | undefined>;
    public readonly clone!: pulumi.Output<outputs.vm.VmClone | undefined>;
    public readonly cores!: pulumi.Output<number | undefined>;
    public readonly cpu!: pulumi.Output<string | undefined>;
    public readonly cpulimit!: pulumi.Output<string | undefined>;
    public readonly cpuunits!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly digest!: pulumi.Output<string | undefined>;
    public readonly disks!: pulumi.Output<outputs.vm.Disk[]>;
    public readonly efidisk0!: pulumi.Output<string | undefined>;
    public readonly hookscript!: pulumi.Output<string | undefined>;
    public readonly hostpci0!: pulumi.Output<string | undefined>;
    public readonly hotplug!: pulumi.Output<string | undefined>;
    public readonly hugepages!: pulumi.Output<string | undefined>;
    public readonly ipconfig0!: pulumi.Output<string | undefined>;
    public readonly kvm!: pulumi.Output<number | undefined>;
    public readonly lock!: pulumi.Output<string | undefined>;
    public readonly machine!: pulumi.Output<string | undefined>;
    public readonly memory!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameserver!: pulumi.Output<string | undefined>;
    public readonly net0!: pulumi.Output<string | undefined>;
    public readonly node!: pulumi.Output<string | undefined>;
    public readonly numa!: pulumi.Output<number | undefined>;
    public readonly numa0!: pulumi.Output<string | undefined>;
    public readonly onboot!: pulumi.Output<number | undefined>;
    public readonly ostype!: pulumi.Output<string | undefined>;
    public readonly parallel0!: pulumi.Output<string | undefined>;
    public readonly protection!: pulumi.Output<number | undefined>;
    public readonly rng0!: pulumi.Output<string | undefined>;
    public readonly scsihw!: pulumi.Output<string | undefined>;
    public readonly searchdomain!: pulumi.Output<string | undefined>;
    public readonly serial0!: pulumi.Output<string | undefined>;
    public readonly smbios1!: pulumi.Output<string | undefined>;
    public readonly sockets!: pulumi.Output<number | undefined>;
    public readonly sshkeys!: pulumi.Output<string | undefined>;
    public readonly tablet!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<string | undefined>;
    public readonly template!: pulumi.Output<number | undefined>;
    public readonly tpmstate0!: pulumi.Output<string | undefined>;
    public readonly usb0!: pulumi.Output<string | undefined>;
    public readonly vcpus!: pulumi.Output<number | undefined>;
    public readonly vga!: pulumi.Output<string | undefined>;
    public readonly vmId!: pulumi.Output<number | undefined>;

    /**
     * Create a Vm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.disks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disks'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["acpi"] = args ? args.acpi : undefined;
            resourceInputs["affinity"] = args ? args.affinity : undefined;
            resourceInputs["agent"] = args ? args.agent : undefined;
            resourceInputs["audio0"] = args ? args.audio0 : undefined;
            resourceInputs["autostart"] = args ? args.autostart : undefined;
            resourceInputs["balloon"] = args ? args.balloon : undefined;
            resourceInputs["bios"] = args ? args.bios : undefined;
            resourceInputs["boot"] = args ? args.boot : undefined;
            resourceInputs["cicustom"] = args ? args.cicustom : undefined;
            resourceInputs["cipassword"] = args ? args.cipassword : undefined;
            resourceInputs["citype"] = args ? args.citype : undefined;
            resourceInputs["ciupgrade"] = args ? args.ciupgrade : undefined;
            resourceInputs["ciuser"] = args ? args.ciuser : undefined;
            resourceInputs["clone"] = args ? args.clone : undefined;
            resourceInputs["cores"] = (args ? args.cores : undefined) ?? 1;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["cpulimit"] = args ? args.cpulimit : undefined;
            resourceInputs["cpuunits"] = args ? args.cpuunits : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["digest"] = args ? args.digest : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["efidisk0"] = args ? args.efidisk0 : undefined;
            resourceInputs["hookscript"] = args ? args.hookscript : undefined;
            resourceInputs["hostpci0"] = args ? args.hostpci0 : undefined;
            resourceInputs["hotplug"] = args ? args.hotplug : undefined;
            resourceInputs["hugepages"] = args ? args.hugepages : undefined;
            resourceInputs["ipconfig0"] = args ? args.ipconfig0 : undefined;
            resourceInputs["kvm"] = args ? args.kvm : undefined;
            resourceInputs["lock"] = args ? args.lock : undefined;
            resourceInputs["machine"] = args ? args.machine : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameserver"] = args ? args.nameserver : undefined;
            resourceInputs["net0"] = args ? args.net0 : undefined;
            resourceInputs["node"] = args ? args.node : undefined;
            resourceInputs["numa"] = args ? args.numa : undefined;
            resourceInputs["numa0"] = args ? args.numa0 : undefined;
            resourceInputs["onboot"] = args ? args.onboot : undefined;
            resourceInputs["ostype"] = args ? args.ostype : undefined;
            resourceInputs["parallel0"] = args ? args.parallel0 : undefined;
            resourceInputs["protection"] = args ? args.protection : undefined;
            resourceInputs["rng0"] = args ? args.rng0 : undefined;
            resourceInputs["scsihw"] = args ? args.scsihw : undefined;
            resourceInputs["searchdomain"] = args ? args.searchdomain : undefined;
            resourceInputs["serial0"] = args ? args.serial0 : undefined;
            resourceInputs["smbios1"] = args ? args.smbios1 : undefined;
            resourceInputs["sockets"] = args ? args.sockets : undefined;
            resourceInputs["sshkeys"] = args ? args.sshkeys : undefined;
            resourceInputs["tablet"] = args ? args.tablet : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["tpmstate0"] = args ? args.tpmstate0 : undefined;
            resourceInputs["usb0"] = args ? args.usb0 : undefined;
            resourceInputs["vcpus"] = args ? args.vcpus : undefined;
            resourceInputs["vga"] = args ? args.vga : undefined;
            resourceInputs["vmId"] = args ? args.vmId : undefined;
        } else {
            resourceInputs["acpi"] = undefined /*out*/;
            resourceInputs["affinity"] = undefined /*out*/;
            resourceInputs["agent"] = undefined /*out*/;
            resourceInputs["audio0"] = undefined /*out*/;
            resourceInputs["autostart"] = undefined /*out*/;
            resourceInputs["balloon"] = undefined /*out*/;
            resourceInputs["bios"] = undefined /*out*/;
            resourceInputs["boot"] = undefined /*out*/;
            resourceInputs["cicustom"] = undefined /*out*/;
            resourceInputs["cipassword"] = undefined /*out*/;
            resourceInputs["citype"] = undefined /*out*/;
            resourceInputs["ciupgrade"] = undefined /*out*/;
            resourceInputs["ciuser"] = undefined /*out*/;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["cores"] = undefined /*out*/;
            resourceInputs["cpu"] = undefined /*out*/;
            resourceInputs["cpulimit"] = undefined /*out*/;
            resourceInputs["cpuunits"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["digest"] = undefined /*out*/;
            resourceInputs["disks"] = undefined /*out*/;
            resourceInputs["efidisk0"] = undefined /*out*/;
            resourceInputs["hookscript"] = undefined /*out*/;
            resourceInputs["hostpci0"] = undefined /*out*/;
            resourceInputs["hotplug"] = undefined /*out*/;
            resourceInputs["hugepages"] = undefined /*out*/;
            resourceInputs["ipconfig0"] = undefined /*out*/;
            resourceInputs["kvm"] = undefined /*out*/;
            resourceInputs["lock"] = undefined /*out*/;
            resourceInputs["machine"] = undefined /*out*/;
            resourceInputs["memory"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nameserver"] = undefined /*out*/;
            resourceInputs["net0"] = undefined /*out*/;
            resourceInputs["node"] = undefined /*out*/;
            resourceInputs["numa"] = undefined /*out*/;
            resourceInputs["numa0"] = undefined /*out*/;
            resourceInputs["onboot"] = undefined /*out*/;
            resourceInputs["ostype"] = undefined /*out*/;
            resourceInputs["parallel0"] = undefined /*out*/;
            resourceInputs["protection"] = undefined /*out*/;
            resourceInputs["rng0"] = undefined /*out*/;
            resourceInputs["scsihw"] = undefined /*out*/;
            resourceInputs["searchdomain"] = undefined /*out*/;
            resourceInputs["serial0"] = undefined /*out*/;
            resourceInputs["smbios1"] = undefined /*out*/;
            resourceInputs["sockets"] = undefined /*out*/;
            resourceInputs["sshkeys"] = undefined /*out*/;
            resourceInputs["tablet"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["template"] = undefined /*out*/;
            resourceInputs["tpmstate0"] = undefined /*out*/;
            resourceInputs["usb0"] = undefined /*out*/;
            resourceInputs["vcpus"] = undefined /*out*/;
            resourceInputs["vga"] = undefined /*out*/;
            resourceInputs["vmId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Vm resource.
 */
export interface VmArgs {
    acpi?: pulumi.Input<number>;
    affinity?: pulumi.Input<string>;
    agent?: pulumi.Input<string>;
    audio0?: pulumi.Input<string>;
    autostart?: pulumi.Input<number>;
    balloon?: pulumi.Input<number>;
    bios?: pulumi.Input<string>;
    boot?: pulumi.Input<string>;
    cicustom?: pulumi.Input<string>;
    cipassword?: pulumi.Input<string>;
    citype?: pulumi.Input<string>;
    ciupgrade?: pulumi.Input<number>;
    ciuser?: pulumi.Input<string>;
    clone?: pulumi.Input<inputs.vm.VmCloneArgs>;
    cores?: pulumi.Input<number>;
    cpu?: pulumi.Input<string>;
    cpulimit?: pulumi.Input<string>;
    cpuunits?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    digest?: pulumi.Input<string>;
    disks: pulumi.Input<pulumi.Input<inputs.vm.DiskArgs>[]>;
    efidisk0?: pulumi.Input<string>;
    hookscript?: pulumi.Input<string>;
    hostpci0?: pulumi.Input<string>;
    hotplug?: pulumi.Input<string>;
    hugepages?: pulumi.Input<string>;
    ipconfig0?: pulumi.Input<string>;
    kvm?: pulumi.Input<number>;
    lock?: pulumi.Input<string>;
    machine?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    nameserver?: pulumi.Input<string>;
    net0?: pulumi.Input<string>;
    node?: pulumi.Input<string>;
    numa?: pulumi.Input<number>;
    numa0?: pulumi.Input<string>;
    onboot?: pulumi.Input<number>;
    ostype?: pulumi.Input<string>;
    parallel0?: pulumi.Input<string>;
    protection?: pulumi.Input<number>;
    rng0?: pulumi.Input<string>;
    scsihw?: pulumi.Input<string>;
    searchdomain?: pulumi.Input<string>;
    serial0?: pulumi.Input<string>;
    smbios1?: pulumi.Input<string>;
    sockets?: pulumi.Input<number>;
    sshkeys?: pulumi.Input<string>;
    tablet?: pulumi.Input<number>;
    tags?: pulumi.Input<string>;
    template?: pulumi.Input<number>;
    tpmstate0?: pulumi.Input<string>;
    usb0?: pulumi.Input<string>;
    vcpus?: pulumi.Input<number>;
    vga?: pulumi.Input<string>;
    vmId?: pulumi.Input<number>;
}
