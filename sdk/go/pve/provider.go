// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pve

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.siemens.cloud/umatch/pulumi-pve/sdk/go/pve/internal"
)

type Provider struct {
	pulumi.ProviderResourceState

	PveToken pulumix.Output[string] `pulumi:"pveToken"`
	PveUrl   pulumix.Output[string] `pulumi:"pveUrl"`
	PveUser  pulumix.Output[string] `pulumi:"pveUser"`
	SshPass  pulumix.Output[string] `pulumi:"sshPass"`
	SshUser  pulumix.Output[string] `pulumi:"sshUser"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PveToken == nil {
		return nil, errors.New("invalid value for required argument 'PveToken'")
	}
	if args.PveUrl == nil {
		return nil, errors.New("invalid value for required argument 'PveUrl'")
	}
	if args.PveUser == nil {
		return nil, errors.New("invalid value for required argument 'PveUser'")
	}
	if args.SshPass == nil {
		return nil, errors.New("invalid value for required argument 'SshPass'")
	}
	if args.SshUser == nil {
		return nil, errors.New("invalid value for required argument 'SshUser'")
	}
	if args.PveToken != nil {
		untypedSecretValue := pulumi.ToSecret(args.PveToken.ToOutput(ctx.Context()).Untyped())
		args.PveToken = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	if args.SshPass != nil {
		untypedSecretValue := pulumi.ToSecret(args.SshPass.ToOutput(ctx.Context()).Untyped())
		args.SshPass = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"pveToken",
		"sshPass",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:pve", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	PveToken string `pulumi:"pveToken"`
	PveUrl   string `pulumi:"pveUrl"`
	PveUser  string `pulumi:"pveUser"`
	SshPass  string `pulumi:"sshPass"`
	SshUser  string `pulumi:"sshUser"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	PveToken pulumix.Input[string]
	PveUrl   pulumix.Input[string]
	PveUser  pulumix.Input[string]
	SshPass  pulumix.Input[string]
	SshUser  pulumix.Input[string]
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToOutput(ctx context.Context) pulumix.Output[Provider] {
	return pulumix.Output[Provider]{
		OutputState: o.OutputState,
	}
}

func (o ProviderOutput) PveToken() pulumix.Output[string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[string] { return v.PveToken })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ProviderOutput) PveUrl() pulumix.Output[string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[string] { return v.PveUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ProviderOutput) PveUser() pulumix.Output[string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[string] { return v.PveUser })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ProviderOutput) SshPass() pulumix.Output[string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[string] { return v.SshPass })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ProviderOutput) SshUser() pulumix.Output[string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[string] { return v.SshUser })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ProviderOutput{})
}
