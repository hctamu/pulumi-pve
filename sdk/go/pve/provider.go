// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pve

import (
	"context"
	"reflect"

	"errors"
	"github.com/hctamu/pulumi-pve/sdk/go/pve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Provider struct {
	pulumi.ProviderResourceState

	PveToken pulumi.StringOutput `pulumi:"pveToken"`
	PveUrl   pulumi.StringOutput `pulumi:"pveUrl"`
	PveUser  pulumi.StringOutput `pulumi:"pveUser"`
	SshPass  pulumi.StringOutput `pulumi:"sshPass"`
	SshUser  pulumi.StringOutput `pulumi:"sshUser"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PveToken == nil {
		return nil, errors.New("invalid value for required argument 'PveToken'")
	}
	if args.PveUrl == nil {
		return nil, errors.New("invalid value for required argument 'PveUrl'")
	}
	if args.PveUser == nil {
		return nil, errors.New("invalid value for required argument 'PveUser'")
	}
	if args.SshPass == nil {
		return nil, errors.New("invalid value for required argument 'SshPass'")
	}
	if args.SshUser == nil {
		return nil, errors.New("invalid value for required argument 'SshUser'")
	}
	if args.PveToken != nil {
		args.PveToken = pulumi.ToSecret(args.PveToken).(pulumi.StringInput)
	}
	if args.SshPass != nil {
		args.SshPass = pulumi.ToSecret(args.SshPass).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"pveToken",
		"sshPass",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:pve", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	PveToken string `pulumi:"pveToken"`
	PveUrl   string `pulumi:"pveUrl"`
	PveUser  string `pulumi:"pveUser"`
	SshPass  string `pulumi:"sshPass"`
	SshUser  string `pulumi:"sshUser"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	PveToken pulumi.StringInput
	PveUrl   pulumi.StringInput
	PveUser  pulumi.StringInput
	SshPass  pulumi.StringInput
	SshUser  pulumi.StringInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) PveToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.PveToken }).(pulumi.StringOutput)
}

func (o ProviderOutput) PveUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.PveUrl }).(pulumi.StringOutput)
}

func (o ProviderOutput) PveUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.PveUser }).(pulumi.StringOutput)
}

func (o ProviderOutput) SshPass() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.SshPass }).(pulumi.StringOutput)
}

func (o ProviderOutput) SshUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.SshUser }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
