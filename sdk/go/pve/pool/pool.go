// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pool

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.siemens.cloud/umatch/pulumi-pve/sdk/go/pve/internal"
)

// A Proxmox pool resource that groups virtual machines under a common pool in the Proxmox VE.
type Pool struct {
	pulumi.CustomResourceState

	// An optional comment for the pool. If not provided, defaults to 'Default pool comment'.
	Comment pulumix.Output[*string] `pulumi:"comment"`
	// The name of the Proxmox pool.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOption) (*Pool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Comment == nil {
		args.Comment = pulumix.Ptr("Default pool comment")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pool
	err := ctx.RegisterResource("pve:pool:Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolState, opts ...pulumi.ResourceOption) (*Pool, error) {
	var resource Pool
	err := ctx.ReadResource("pve:pool:Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pool resources.
type poolState struct {
}

type PoolState struct {
}

func (PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolState)(nil)).Elem()
}

type poolArgs struct {
	// An optional comment for the pool. If not provided, defaults to 'Default pool comment'.
	Comment *string `pulumi:"comment"`
	// The name of the Proxmox pool.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// An optional comment for the pool. If not provided, defaults to 'Default pool comment'.
	Comment pulumix.Input[*string]
	// The name of the Proxmox pool.
	Name pulumix.Input[string]
}

func (PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolArgs)(nil)).Elem()
}

type PoolOutput struct{ *pulumi.OutputState }

func (PoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pool)(nil)).Elem()
}

func (o PoolOutput) ToPoolOutput() PoolOutput {
	return o
}

func (o PoolOutput) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return o
}

func (o PoolOutput) ToOutput(ctx context.Context) pulumix.Output[Pool] {
	return pulumix.Output[Pool]{
		OutputState: o.OutputState,
	}
}

// An optional comment for the pool. If not provided, defaults to 'Default pool comment'.
func (o PoolOutput) Comment() pulumix.Output[*string] {
	value := pulumix.Apply[Pool](o, func(v Pool) pulumix.Output[*string] { return v.Comment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the Proxmox pool.
func (o PoolOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Pool](o, func(v Pool) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PoolOutput{})
}
