// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/hctamu/pulumi-pve/sdk/go/pve/internal"
)

type File struct {
	pulumi.CustomResourceState

	// The type of the file (e.g: snippets)
	ContentType pulumix.Output[string] `pulumi:"contentType"`
	// The datastore to upload the file to.  (e.g:ceph-ha)
	DatastoreId pulumix.Output[string] `pulumi:"datastoreId"`
	// The raw source data
	SourceRaw pulumix.GPtrOutput[FileSourceRaw, FileSourceRawOutput] `pulumi:"sourceRaw"`
}

// NewFile registers a new resource with the given unique name, arguments, and options.
func NewFile(ctx *pulumi.Context,
	name string, args *FileArgs, opts ...pulumi.ResourceOption) (*File, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.DatastoreId == nil {
		return nil, errors.New("invalid value for required argument 'DatastoreId'")
	}
	if args.SourceRaw == nil {
		return nil, errors.New("invalid value for required argument 'SourceRaw'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource File
	err := ctx.RegisterResource("pve:storage:File", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFile gets an existing File resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileState, opts ...pulumi.ResourceOption) (*File, error) {
	var resource File
	err := ctx.ReadResource("pve:storage:File", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering File resources.
type fileState struct {
}

type FileState struct {
}

func (FileState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileState)(nil)).Elem()
}

type fileArgs struct {
	// The type of the file (e.g: snippets)
	ContentType string `pulumi:"contentType"`
	// The datastore to upload the file to.  (e.g:ceph-ha)
	DatastoreId string `pulumi:"datastoreId"`
	// The raw source data
	SourceRaw FileSourceRaw `pulumi:"sourceRaw"`
}

// The set of arguments for constructing a File resource.
type FileArgs struct {
	// The type of the file (e.g: snippets)
	ContentType pulumix.Input[string]
	// The datastore to upload the file to.  (e.g:ceph-ha)
	DatastoreId pulumix.Input[string]
	// The raw source data
	SourceRaw pulumix.Input[*FileSourceRawArgs]
}

func (FileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileArgs)(nil)).Elem()
}

type FileOutput struct{ *pulumi.OutputState }

func (FileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*File)(nil)).Elem()
}

func (o FileOutput) ToFileOutput() FileOutput {
	return o
}

func (o FileOutput) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return o
}

func (o FileOutput) ToOutput(ctx context.Context) pulumix.Output[File] {
	return pulumix.Output[File]{
		OutputState: o.OutputState,
	}
}

// The type of the file (e.g: snippets)
func (o FileOutput) ContentType() pulumix.Output[string] {
	value := pulumix.Apply[File](o, func(v File) pulumix.Output[string] { return v.ContentType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The datastore to upload the file to.  (e.g:ceph-ha)
func (o FileOutput) DatastoreId() pulumix.Output[string] {
	value := pulumix.Apply[File](o, func(v File) pulumix.Output[string] { return v.DatastoreId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The raw source data
func (o FileOutput) SourceRaw() pulumix.GPtrOutput[FileSourceRaw, FileSourceRawOutput] {
	value := pulumix.Apply[File](o, func(v File) pulumix.GPtrOutput[FileSourceRaw, FileSourceRawOutput] { return v.SourceRaw })
	unwrapped := pulumix.Flatten[*FileSourceRaw, pulumix.GPtrOutput[FileSourceRaw, FileSourceRawOutput]](value)
	return pulumix.GPtrOutput[FileSourceRaw, FileSourceRawOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FileOutput{})
}
