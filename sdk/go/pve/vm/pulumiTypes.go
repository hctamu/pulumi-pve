// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.siemens.cloud/umatch/pulumi-pve/sdk/go/pve/internal"
)

var _ = internal.GetEnvOrDefault

type Disk struct {
	Filename  *string `pulumi:"filename"`
	Interface string  `pulumi:"interface"`
	Size      int     `pulumi:"size"`
	Storage   string  `pulumi:"storage"`
}

type DiskArgs struct {
	Filename  pulumix.Input[*string] `pulumi:"filename"`
	Interface pulumix.Input[string]  `pulumi:"interface"`
	Size      pulumix.Input[int]     `pulumi:"size"`
	Storage   pulumix.Input[string]  `pulumi:"storage"`
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (i DiskArgs) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

func (i *DiskArgs) ToOutput(ctx context.Context) pulumix.Output[*DiskArgs] {
	return pulumix.Val(i)
}

type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

func (o DiskOutput) ToOutput(ctx context.Context) pulumix.Output[Disk] {
	return pulumix.Output[Disk]{
		OutputState: o.OutputState,
	}
}

func (o DiskOutput) Filename() pulumix.Output[*string] {
	return pulumix.Apply[Disk](o, func(v Disk) *string { return v.Filename })
}

func (o DiskOutput) Interface() pulumix.Output[string] {
	return pulumix.Apply[Disk](o, func(v Disk) string { return v.Interface })
}

func (o DiskOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[Disk](o, func(v Disk) int { return v.Size })
}

func (o DiskOutput) Storage() pulumix.Output[string] {
	return pulumix.Apply[Disk](o, func(v Disk) string { return v.Storage })
}

type VmClone struct {
	DataStoreId *string `pulumi:"dataStoreId"`
	FullClone   *bool   `pulumi:"fullClone"`
	Node        *string `pulumi:"node"`
	Timeout     *int    `pulumi:"timeout"`
	VmId        int     `pulumi:"vmId"`
}

type VmCloneArgs struct {
	DataStoreId pulumix.Input[*string] `pulumi:"dataStoreId"`
	FullClone   pulumix.Input[*bool]   `pulumi:"fullClone"`
	Node        pulumix.Input[*string] `pulumi:"node"`
	Timeout     pulumix.Input[*int]    `pulumi:"timeout"`
	VmId        pulumix.Input[int]     `pulumi:"vmId"`
}

func (VmCloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmClone)(nil)).Elem()
}

func (i VmCloneArgs) ToVmCloneOutput() VmCloneOutput {
	return i.ToVmCloneOutputWithContext(context.Background())
}

func (i VmCloneArgs) ToVmCloneOutputWithContext(ctx context.Context) VmCloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmCloneOutput)
}

func (i *VmCloneArgs) ToOutput(ctx context.Context) pulumix.Output[*VmCloneArgs] {
	return pulumix.Val(i)
}

type VmCloneOutput struct{ *pulumi.OutputState }

func (VmCloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmClone)(nil)).Elem()
}

func (o VmCloneOutput) ToVmCloneOutput() VmCloneOutput {
	return o
}

func (o VmCloneOutput) ToVmCloneOutputWithContext(ctx context.Context) VmCloneOutput {
	return o
}

func (o VmCloneOutput) ToOutput(ctx context.Context) pulumix.Output[VmClone] {
	return pulumix.Output[VmClone]{
		OutputState: o.OutputState,
	}
}

func (o VmCloneOutput) DataStoreId() pulumix.Output[*string] {
	return pulumix.Apply[VmClone](o, func(v VmClone) *string { return v.DataStoreId })
}

func (o VmCloneOutput) FullClone() pulumix.Output[*bool] {
	return pulumix.Apply[VmClone](o, func(v VmClone) *bool { return v.FullClone })
}

func (o VmCloneOutput) Node() pulumix.Output[*string] {
	return pulumix.Apply[VmClone](o, func(v VmClone) *string { return v.Node })
}

func (o VmCloneOutput) Timeout() pulumix.Output[*int] {
	return pulumix.Apply[VmClone](o, func(v VmClone) *int { return v.Timeout })
}

func (o VmCloneOutput) VmId() pulumix.Output[int] {
	return pulumix.Apply[VmClone](o, func(v VmClone) int { return v.VmId })
}

func init() {
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(VmCloneOutput{})
}
