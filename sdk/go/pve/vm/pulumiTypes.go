// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"github.com/hctamu/pulumi-pve/sdk/go/pve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Clone struct {
	DataStoreId *string `pulumi:"dataStoreId"`
	FullClone   *bool   `pulumi:"fullClone"`
	Node        *string `pulumi:"node"`
	Timeout     *int    `pulumi:"timeout"`
	VmId        int     `pulumi:"vmId"`
}

// CloneInput is an input type that accepts CloneArgs and CloneOutput values.
// You can construct a concrete instance of `CloneInput` via:
//
//	CloneArgs{...}
type CloneInput interface {
	pulumi.Input

	ToCloneOutput() CloneOutput
	ToCloneOutputWithContext(context.Context) CloneOutput
}

type CloneArgs struct {
	DataStoreId pulumi.StringPtrInput `pulumi:"dataStoreId"`
	FullClone   pulumi.BoolPtrInput   `pulumi:"fullClone"`
	Node        pulumi.StringPtrInput `pulumi:"node"`
	Timeout     pulumi.IntPtrInput    `pulumi:"timeout"`
	VmId        pulumi.IntInput       `pulumi:"vmId"`
}

func (CloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Clone)(nil)).Elem()
}

func (i CloneArgs) ToCloneOutput() CloneOutput {
	return i.ToCloneOutputWithContext(context.Background())
}

func (i CloneArgs) ToCloneOutputWithContext(ctx context.Context) CloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloneOutput)
}

func (i CloneArgs) ToClonePtrOutput() ClonePtrOutput {
	return i.ToClonePtrOutputWithContext(context.Background())
}

func (i CloneArgs) ToClonePtrOutputWithContext(ctx context.Context) ClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloneOutput).ToClonePtrOutputWithContext(ctx)
}

// ClonePtrInput is an input type that accepts CloneArgs, ClonePtr and ClonePtrOutput values.
// You can construct a concrete instance of `ClonePtrInput` via:
//
//	        CloneArgs{...}
//
//	or:
//
//	        nil
type ClonePtrInput interface {
	pulumi.Input

	ToClonePtrOutput() ClonePtrOutput
	ToClonePtrOutputWithContext(context.Context) ClonePtrOutput
}

type clonePtrType CloneArgs

func ClonePtr(v *CloneArgs) ClonePtrInput {
	return (*clonePtrType)(v)
}

func (*clonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Clone)(nil)).Elem()
}

func (i *clonePtrType) ToClonePtrOutput() ClonePtrOutput {
	return i.ToClonePtrOutputWithContext(context.Background())
}

func (i *clonePtrType) ToClonePtrOutputWithContext(ctx context.Context) ClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClonePtrOutput)
}

type CloneOutput struct{ *pulumi.OutputState }

func (CloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Clone)(nil)).Elem()
}

func (o CloneOutput) ToCloneOutput() CloneOutput {
	return o
}

func (o CloneOutput) ToCloneOutputWithContext(ctx context.Context) CloneOutput {
	return o
}

func (o CloneOutput) ToClonePtrOutput() ClonePtrOutput {
	return o.ToClonePtrOutputWithContext(context.Background())
}

func (o CloneOutput) ToClonePtrOutputWithContext(ctx context.Context) ClonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Clone) *Clone {
		return &v
	}).(ClonePtrOutput)
}

func (o CloneOutput) DataStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Clone) *string { return v.DataStoreId }).(pulumi.StringPtrOutput)
}

func (o CloneOutput) FullClone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Clone) *bool { return v.FullClone }).(pulumi.BoolPtrOutput)
}

func (o CloneOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Clone) *string { return v.Node }).(pulumi.StringPtrOutput)
}

func (o CloneOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Clone) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o CloneOutput) VmId() pulumi.IntOutput {
	return o.ApplyT(func(v Clone) int { return v.VmId }).(pulumi.IntOutput)
}

type ClonePtrOutput struct{ *pulumi.OutputState }

func (ClonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clone)(nil)).Elem()
}

func (o ClonePtrOutput) ToClonePtrOutput() ClonePtrOutput {
	return o
}

func (o ClonePtrOutput) ToClonePtrOutputWithContext(ctx context.Context) ClonePtrOutput {
	return o
}

func (o ClonePtrOutput) Elem() CloneOutput {
	return o.ApplyT(func(v *Clone) Clone {
		if v != nil {
			return *v
		}
		var ret Clone
		return ret
	}).(CloneOutput)
}

func (o ClonePtrOutput) DataStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clone) *string {
		if v == nil {
			return nil
		}
		return v.DataStoreId
	}).(pulumi.StringPtrOutput)
}

func (o ClonePtrOutput) FullClone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Clone) *bool {
		if v == nil {
			return nil
		}
		return v.FullClone
	}).(pulumi.BoolPtrOutput)
}

func (o ClonePtrOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clone) *string {
		if v == nil {
			return nil
		}
		return v.Node
	}).(pulumi.StringPtrOutput)
}

func (o ClonePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Clone) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

func (o ClonePtrOutput) VmId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Clone) *int {
		if v == nil {
			return nil
		}
		return &v.VmId
	}).(pulumi.IntPtrOutput)
}

type Disk struct {
	Filename  *string `pulumi:"filename"`
	Interface string  `pulumi:"interface"`
	Size      int     `pulumi:"size"`
	Storage   string  `pulumi:"storage"`
}

// DiskInput is an input type that accepts DiskArgs and DiskOutput values.
// You can construct a concrete instance of `DiskInput` via:
//
//	DiskArgs{...}
type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(context.Context) DiskOutput
}

type DiskArgs struct {
	Filename  pulumi.StringPtrInput `pulumi:"filename"`
	Interface pulumi.StringInput    `pulumi:"interface"`
	Size      pulumi.IntInput       `pulumi:"size"`
	Storage   pulumi.StringInput    `pulumi:"storage"`
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (i DiskArgs) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//	DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

func (o DiskOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.Filename }).(pulumi.StringPtrOutput)
}

func (o DiskOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v Disk) string { return v.Interface }).(pulumi.StringOutput)
}

func (o DiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v Disk) int { return v.Size }).(pulumi.IntOutput)
}

func (o DiskOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v Disk) string { return v.Storage }).(pulumi.StringOutput)
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Disk {
		return vs[0].([]Disk)[vs[1].(int)]
	}).(DiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloneInput)(nil)).Elem(), CloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClonePtrInput)(nil)).Elem(), CloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskInput)(nil)).Elem(), DiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskArrayInput)(nil)).Elem(), DiskArray{})
	pulumi.RegisterOutputType(CloneOutput{})
	pulumi.RegisterOutputType(ClonePtrOutput{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
}
