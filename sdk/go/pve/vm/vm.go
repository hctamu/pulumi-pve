// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/hctamu/pulumi-pve/sdk/go/pve/internal"
)

type Vm struct {
	pulumi.CustomResourceState

	Acpi         pulumix.Output[*int]                       `pulumi:"acpi"`
	Affinity     pulumix.Output[*string]                    `pulumi:"affinity"`
	Agent        pulumix.Output[*string]                    `pulumi:"agent"`
	Audio0       pulumix.Output[*string]                    `pulumi:"audio0"`
	Autostart    pulumix.Output[*int]                       `pulumi:"autostart"`
	Balloon      pulumix.Output[*int]                       `pulumi:"balloon"`
	Bios         pulumix.Output[*string]                    `pulumi:"bios"`
	Boot         pulumix.Output[*string]                    `pulumi:"boot"`
	Cicustom     pulumix.Output[*string]                    `pulumi:"cicustom"`
	Cipassword   pulumix.Output[*string]                    `pulumi:"cipassword"`
	Citype       pulumix.Output[*string]                    `pulumi:"citype"`
	Ciupgrade    pulumix.Output[*int]                       `pulumi:"ciupgrade"`
	Ciuser       pulumix.Output[*string]                    `pulumi:"ciuser"`
	Clone        pulumix.GPtrOutput[VmClone, VmCloneOutput] `pulumi:"clone"`
	Cores        pulumix.Output[*int]                       `pulumi:"cores"`
	Cpu          pulumix.Output[*string]                    `pulumi:"cpu"`
	Cpulimit     pulumix.Output[*string]                    `pulumi:"cpulimit"`
	Cpuunits     pulumix.Output[*int]                       `pulumi:"cpuunits"`
	Description  pulumix.Output[*string]                    `pulumi:"description"`
	Digest       pulumix.Output[*string]                    `pulumi:"digest"`
	Disks        pulumix.GArrayOutput[Disk, DiskOutput]     `pulumi:"disks"`
	Efidisk0     pulumix.Output[*string]                    `pulumi:"efidisk0"`
	Hookscript   pulumix.Output[*string]                    `pulumi:"hookscript"`
	Hostpci0     pulumix.Output[*string]                    `pulumi:"hostpci0"`
	Hotplug      pulumix.Output[*string]                    `pulumi:"hotplug"`
	Hugepages    pulumix.Output[*string]                    `pulumi:"hugepages"`
	Ipconfig0    pulumix.Output[*string]                    `pulumi:"ipconfig0"`
	Kvm          pulumix.Output[*int]                       `pulumi:"kvm"`
	Lock         pulumix.Output[*string]                    `pulumi:"lock"`
	Machine      pulumix.Output[*string]                    `pulumi:"machine"`
	Memory       pulumix.Output[*int]                       `pulumi:"memory"`
	Name         pulumix.Output[string]                     `pulumi:"name"`
	Nameserver   pulumix.Output[*string]                    `pulumi:"nameserver"`
	Net0         pulumix.Output[*string]                    `pulumi:"net0"`
	Node         pulumix.Output[*string]                    `pulumi:"node"`
	Numa         pulumix.Output[*int]                       `pulumi:"numa"`
	Numa0        pulumix.Output[*string]                    `pulumi:"numa0"`
	Onboot       pulumix.Output[*int]                       `pulumi:"onboot"`
	Ostype       pulumix.Output[*string]                    `pulumi:"ostype"`
	Parallel0    pulumix.Output[*string]                    `pulumi:"parallel0"`
	Protection   pulumix.Output[*int]                       `pulumi:"protection"`
	Rng0         pulumix.Output[*string]                    `pulumi:"rng0"`
	Scsihw       pulumix.Output[*string]                    `pulumi:"scsihw"`
	Searchdomain pulumix.Output[*string]                    `pulumi:"searchdomain"`
	Serial0      pulumix.Output[*string]                    `pulumi:"serial0"`
	Smbios1      pulumix.Output[*string]                    `pulumi:"smbios1"`
	Sockets      pulumix.Output[*int]                       `pulumi:"sockets"`
	Sshkeys      pulumix.Output[*string]                    `pulumi:"sshkeys"`
	Tablet       pulumix.Output[*int]                       `pulumi:"tablet"`
	Tags         pulumix.Output[*string]                    `pulumi:"tags"`
	Template     pulumix.Output[*int]                       `pulumi:"template"`
	Tpmstate0    pulumix.Output[*string]                    `pulumi:"tpmstate0"`
	Usb0         pulumix.Output[*string]                    `pulumi:"usb0"`
	Vcpus        pulumix.Output[*int]                       `pulumi:"vcpus"`
	Vga          pulumix.Output[*string]                    `pulumi:"vga"`
	VmId         pulumix.Output[*int]                       `pulumi:"vmId"`
}

// NewVm registers a new resource with the given unique name, arguments, and options.
func NewVm(ctx *pulumi.Context,
	name string, args *VmArgs, opts ...pulumi.ResourceOption) (*Vm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disks == nil {
		return nil, errors.New("invalid value for required argument 'Disks'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Cores == nil {
		args.Cores = pulumix.Ptr(1)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vm
	err := ctx.RegisterResource("pve:vm:Vm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVm gets an existing Vm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmState, opts ...pulumi.ResourceOption) (*Vm, error) {
	var resource Vm
	err := ctx.ReadResource("pve:vm:Vm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vm resources.
type vmState struct {
}

type VmState struct {
}

func (VmState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmState)(nil)).Elem()
}

type vmArgs struct {
	Acpi         *int     `pulumi:"acpi"`
	Affinity     *string  `pulumi:"affinity"`
	Agent        *string  `pulumi:"agent"`
	Audio0       *string  `pulumi:"audio0"`
	Autostart    *int     `pulumi:"autostart"`
	Balloon      *int     `pulumi:"balloon"`
	Bios         *string  `pulumi:"bios"`
	Boot         *string  `pulumi:"boot"`
	Cicustom     *string  `pulumi:"cicustom"`
	Cipassword   *string  `pulumi:"cipassword"`
	Citype       *string  `pulumi:"citype"`
	Ciupgrade    *int     `pulumi:"ciupgrade"`
	Ciuser       *string  `pulumi:"ciuser"`
	Clone        *VmClone `pulumi:"clone"`
	Cores        *int     `pulumi:"cores"`
	Cpu          *string  `pulumi:"cpu"`
	Cpulimit     *string  `pulumi:"cpulimit"`
	Cpuunits     *int     `pulumi:"cpuunits"`
	Description  *string  `pulumi:"description"`
	Digest       *string  `pulumi:"digest"`
	Disks        []Disk   `pulumi:"disks"`
	Efidisk0     *string  `pulumi:"efidisk0"`
	Hookscript   *string  `pulumi:"hookscript"`
	Hostpci0     *string  `pulumi:"hostpci0"`
	Hotplug      *string  `pulumi:"hotplug"`
	Hugepages    *string  `pulumi:"hugepages"`
	Ipconfig0    *string  `pulumi:"ipconfig0"`
	Kvm          *int     `pulumi:"kvm"`
	Lock         *string  `pulumi:"lock"`
	Machine      *string  `pulumi:"machine"`
	Memory       *int     `pulumi:"memory"`
	Name         string   `pulumi:"name"`
	Nameserver   *string  `pulumi:"nameserver"`
	Net0         *string  `pulumi:"net0"`
	Node         *string  `pulumi:"node"`
	Numa         *int     `pulumi:"numa"`
	Numa0        *string  `pulumi:"numa0"`
	Onboot       *int     `pulumi:"onboot"`
	Ostype       *string  `pulumi:"ostype"`
	Parallel0    *string  `pulumi:"parallel0"`
	Protection   *int     `pulumi:"protection"`
	Rng0         *string  `pulumi:"rng0"`
	Scsihw       *string  `pulumi:"scsihw"`
	Searchdomain *string  `pulumi:"searchdomain"`
	Serial0      *string  `pulumi:"serial0"`
	Smbios1      *string  `pulumi:"smbios1"`
	Sockets      *int     `pulumi:"sockets"`
	Sshkeys      *string  `pulumi:"sshkeys"`
	Tablet       *int     `pulumi:"tablet"`
	Tags         *string  `pulumi:"tags"`
	Template     *int     `pulumi:"template"`
	Tpmstate0    *string  `pulumi:"tpmstate0"`
	Usb0         *string  `pulumi:"usb0"`
	Vcpus        *int     `pulumi:"vcpus"`
	Vga          *string  `pulumi:"vga"`
	VmId         *int     `pulumi:"vmId"`
}

// The set of arguments for constructing a Vm resource.
type VmArgs struct {
	Acpi         pulumix.Input[*int]
	Affinity     pulumix.Input[*string]
	Agent        pulumix.Input[*string]
	Audio0       pulumix.Input[*string]
	Autostart    pulumix.Input[*int]
	Balloon      pulumix.Input[*int]
	Bios         pulumix.Input[*string]
	Boot         pulumix.Input[*string]
	Cicustom     pulumix.Input[*string]
	Cipassword   pulumix.Input[*string]
	Citype       pulumix.Input[*string]
	Ciupgrade    pulumix.Input[*int]
	Ciuser       pulumix.Input[*string]
	Clone        pulumix.Input[*VmCloneArgs]
	Cores        pulumix.Input[*int]
	Cpu          pulumix.Input[*string]
	Cpulimit     pulumix.Input[*string]
	Cpuunits     pulumix.Input[*int]
	Description  pulumix.Input[*string]
	Digest       pulumix.Input[*string]
	Disks        pulumix.Input[[]*DiskArgs]
	Efidisk0     pulumix.Input[*string]
	Hookscript   pulumix.Input[*string]
	Hostpci0     pulumix.Input[*string]
	Hotplug      pulumix.Input[*string]
	Hugepages    pulumix.Input[*string]
	Ipconfig0    pulumix.Input[*string]
	Kvm          pulumix.Input[*int]
	Lock         pulumix.Input[*string]
	Machine      pulumix.Input[*string]
	Memory       pulumix.Input[*int]
	Name         pulumix.Input[string]
	Nameserver   pulumix.Input[*string]
	Net0         pulumix.Input[*string]
	Node         pulumix.Input[*string]
	Numa         pulumix.Input[*int]
	Numa0        pulumix.Input[*string]
	Onboot       pulumix.Input[*int]
	Ostype       pulumix.Input[*string]
	Parallel0    pulumix.Input[*string]
	Protection   pulumix.Input[*int]
	Rng0         pulumix.Input[*string]
	Scsihw       pulumix.Input[*string]
	Searchdomain pulumix.Input[*string]
	Serial0      pulumix.Input[*string]
	Smbios1      pulumix.Input[*string]
	Sockets      pulumix.Input[*int]
	Sshkeys      pulumix.Input[*string]
	Tablet       pulumix.Input[*int]
	Tags         pulumix.Input[*string]
	Template     pulumix.Input[*int]
	Tpmstate0    pulumix.Input[*string]
	Usb0         pulumix.Input[*string]
	Vcpus        pulumix.Input[*int]
	Vga          pulumix.Input[*string]
	VmId         pulumix.Input[*int]
}

func (VmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmArgs)(nil)).Elem()
}

type VmOutput struct{ *pulumi.OutputState }

func (VmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm)(nil)).Elem()
}

func (o VmOutput) ToVmOutput() VmOutput {
	return o
}

func (o VmOutput) ToVmOutputWithContext(ctx context.Context) VmOutput {
	return o
}

func (o VmOutput) ToOutput(ctx context.Context) pulumix.Output[Vm] {
	return pulumix.Output[Vm]{
		OutputState: o.OutputState,
	}
}

func (o VmOutput) Acpi() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Acpi })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Affinity() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Affinity })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Agent() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Agent })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Audio0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Audio0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Autostart() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Autostart })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Balloon() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Balloon })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Bios() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Bios })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Boot() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Boot })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Cicustom() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Cicustom })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Cipassword() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Cipassword })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Citype() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Citype })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Ciupgrade() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Ciupgrade })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Ciuser() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Ciuser })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Clone() pulumix.GPtrOutput[VmClone, VmCloneOutput] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.GPtrOutput[VmClone, VmCloneOutput] { return v.Clone })
	unwrapped := pulumix.Flatten[*VmClone, pulumix.GPtrOutput[VmClone, VmCloneOutput]](value)
	return pulumix.GPtrOutput[VmClone, VmCloneOutput]{OutputState: unwrapped.OutputState}
}

func (o VmOutput) Cores() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Cores })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Cpu() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Cpu })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Cpulimit() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Cpulimit })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Cpuunits() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Cpuunits })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Digest() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Digest })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Disks() pulumix.GArrayOutput[Disk, DiskOutput] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.GArrayOutput[Disk, DiskOutput] { return v.Disks })
	unwrapped := pulumix.Flatten[[]Disk, pulumix.GArrayOutput[Disk, DiskOutput]](value)
	return pulumix.GArrayOutput[Disk, DiskOutput]{OutputState: unwrapped.OutputState}
}

func (o VmOutput) Efidisk0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Efidisk0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Hookscript() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Hookscript })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Hostpci0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Hostpci0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Hotplug() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Hotplug })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Hugepages() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Hugepages })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Ipconfig0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Ipconfig0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Kvm() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Kvm })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Lock() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Lock })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Machine() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Machine })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Memory() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Memory })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o VmOutput) Nameserver() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Nameserver })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Net0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Net0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Node() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Node })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Numa() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Numa })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Numa0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Numa0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Onboot() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Onboot })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Ostype() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Ostype })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Parallel0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Parallel0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Protection() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Protection })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Rng0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Rng0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Scsihw() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Scsihw })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Searchdomain() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Searchdomain })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Serial0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Serial0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Smbios1() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Smbios1 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Sockets() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Sockets })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Sshkeys() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Sshkeys })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Tablet() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Tablet })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Tags() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Tags })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Template() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Template })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Tpmstate0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Tpmstate0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Usb0() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Usb0 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) Vcpus() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.Vcpus })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o VmOutput) Vga() pulumix.Output[*string] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*string] { return v.Vga })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o VmOutput) VmId() pulumix.Output[*int] {
	value := pulumix.Apply[Vm](o, func(v Vm) pulumix.Output[*int] { return v.VmId })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(VmOutput{})
}
