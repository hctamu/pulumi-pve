// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"errors"
	"github.com/hctamu/pulumi-pve/sdk/go/pve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VM struct {
	pulumi.CustomResourceState

	Acpi         pulumi.IntPtrOutput    `pulumi:"acpi"`
	Affinity     pulumi.StringPtrOutput `pulumi:"affinity"`
	Agent        pulumi.StringPtrOutput `pulumi:"agent"`
	Audio0       pulumi.StringPtrOutput `pulumi:"audio0"`
	Autostart    pulumi.IntPtrOutput    `pulumi:"autostart"`
	Balloon      pulumi.IntPtrOutput    `pulumi:"balloon"`
	Bios         pulumi.StringPtrOutput `pulumi:"bios"`
	Boot         pulumi.StringPtrOutput `pulumi:"boot"`
	Cicustom     pulumi.StringPtrOutput `pulumi:"cicustom"`
	Cipassword   pulumi.StringPtrOutput `pulumi:"cipassword"`
	Citype       pulumi.StringPtrOutput `pulumi:"citype"`
	Ciupgrade    pulumi.IntPtrOutput    `pulumi:"ciupgrade"`
	Ciuser       pulumi.StringPtrOutput `pulumi:"ciuser"`
	Clone        ClonePtrOutput         `pulumi:"clone"`
	Cores        pulumi.IntPtrOutput    `pulumi:"cores"`
	Cpu          pulumi.StringPtrOutput `pulumi:"cpu"`
	Cpulimit     pulumi.StringPtrOutput `pulumi:"cpulimit"`
	Cpuunits     pulumi.IntPtrOutput    `pulumi:"cpuunits"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	Digest       pulumi.StringPtrOutput `pulumi:"digest"`
	Disks        DiskArrayOutput        `pulumi:"disks"`
	Efidisk0     pulumi.StringPtrOutput `pulumi:"efidisk0"`
	Hookscript   pulumi.StringPtrOutput `pulumi:"hookscript"`
	Hostpci0     pulumi.StringPtrOutput `pulumi:"hostpci0"`
	Hotplug      pulumi.StringPtrOutput `pulumi:"hotplug"`
	Hugepages    pulumi.StringPtrOutput `pulumi:"hugepages"`
	Ipconfig0    pulumi.StringPtrOutput `pulumi:"ipconfig0"`
	Kvm          pulumi.IntPtrOutput    `pulumi:"kvm"`
	Lock         pulumi.StringPtrOutput `pulumi:"lock"`
	Machine      pulumi.StringPtrOutput `pulumi:"machine"`
	Memory       pulumi.IntPtrOutput    `pulumi:"memory"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	Nameserver   pulumi.StringPtrOutput `pulumi:"nameserver"`
	Net0         pulumi.StringPtrOutput `pulumi:"net0"`
	Node         pulumi.StringPtrOutput `pulumi:"node"`
	Numa         pulumi.IntPtrOutput    `pulumi:"numa"`
	Numa0        pulumi.StringPtrOutput `pulumi:"numa0"`
	Onboot       pulumi.IntPtrOutput    `pulumi:"onboot"`
	Ostype       pulumi.StringPtrOutput `pulumi:"ostype"`
	Parallel0    pulumi.StringPtrOutput `pulumi:"parallel0"`
	Protection   pulumi.IntPtrOutput    `pulumi:"protection"`
	Rng0         pulumi.StringPtrOutput `pulumi:"rng0"`
	Scsihw       pulumi.StringPtrOutput `pulumi:"scsihw"`
	Searchdomain pulumi.StringPtrOutput `pulumi:"searchdomain"`
	Serial0      pulumi.StringPtrOutput `pulumi:"serial0"`
	Smbios1      pulumi.StringPtrOutput `pulumi:"smbios1"`
	Sockets      pulumi.IntPtrOutput    `pulumi:"sockets"`
	Sshkeys      pulumi.StringPtrOutput `pulumi:"sshkeys"`
	Tablet       pulumi.IntPtrOutput    `pulumi:"tablet"`
	Tags         pulumi.StringPtrOutput `pulumi:"tags"`
	Template     pulumi.IntPtrOutput    `pulumi:"template"`
	Tpmstate0    pulumi.StringPtrOutput `pulumi:"tpmstate0"`
	Usb0         pulumi.StringPtrOutput `pulumi:"usb0"`
	Vcpus        pulumi.IntPtrOutput    `pulumi:"vcpus"`
	Vga          pulumi.StringPtrOutput `pulumi:"vga"`
	VmId         pulumi.IntPtrOutput    `pulumi:"vmId"`
}

// NewVM registers a new resource with the given unique name, arguments, and options.
func NewVM(ctx *pulumi.Context,
	name string, args *VMArgs, opts ...pulumi.ResourceOption) (*VM, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disks == nil {
		return nil, errors.New("invalid value for required argument 'Disks'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Cores == nil {
		args.Cores = pulumi.IntPtr(1)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VM
	err := ctx.RegisterResource("pve:vm:VM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVM gets an existing VM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMState, opts ...pulumi.ResourceOption) (*VM, error) {
	var resource VM
	err := ctx.ReadResource("pve:vm:VM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VM resources.
type vmState struct {
}

type VMState struct {
}

func (VMState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmState)(nil)).Elem()
}

type vmArgs struct {
	Acpi         *int    `pulumi:"acpi"`
	Affinity     *string `pulumi:"affinity"`
	Agent        *string `pulumi:"agent"`
	Audio0       *string `pulumi:"audio0"`
	Autostart    *int    `pulumi:"autostart"`
	Balloon      *int    `pulumi:"balloon"`
	Bios         *string `pulumi:"bios"`
	Boot         *string `pulumi:"boot"`
	Cicustom     *string `pulumi:"cicustom"`
	Cipassword   *string `pulumi:"cipassword"`
	Citype       *string `pulumi:"citype"`
	Ciupgrade    *int    `pulumi:"ciupgrade"`
	Ciuser       *string `pulumi:"ciuser"`
	Clone        *Clone  `pulumi:"clone"`
	Cores        *int    `pulumi:"cores"`
	Cpu          *string `pulumi:"cpu"`
	Cpulimit     *string `pulumi:"cpulimit"`
	Cpuunits     *int    `pulumi:"cpuunits"`
	Description  *string `pulumi:"description"`
	Digest       *string `pulumi:"digest"`
	Disks        []Disk  `pulumi:"disks"`
	Efidisk0     *string `pulumi:"efidisk0"`
	Hookscript   *string `pulumi:"hookscript"`
	Hostpci0     *string `pulumi:"hostpci0"`
	Hotplug      *string `pulumi:"hotplug"`
	Hugepages    *string `pulumi:"hugepages"`
	Ipconfig0    *string `pulumi:"ipconfig0"`
	Kvm          *int    `pulumi:"kvm"`
	Lock         *string `pulumi:"lock"`
	Machine      *string `pulumi:"machine"`
	Memory       *int    `pulumi:"memory"`
	Name         string  `pulumi:"name"`
	Nameserver   *string `pulumi:"nameserver"`
	Net0         *string `pulumi:"net0"`
	Node         *string `pulumi:"node"`
	Numa         *int    `pulumi:"numa"`
	Numa0        *string `pulumi:"numa0"`
	Onboot       *int    `pulumi:"onboot"`
	Ostype       *string `pulumi:"ostype"`
	Parallel0    *string `pulumi:"parallel0"`
	Protection   *int    `pulumi:"protection"`
	Rng0         *string `pulumi:"rng0"`
	Scsihw       *string `pulumi:"scsihw"`
	Searchdomain *string `pulumi:"searchdomain"`
	Serial0      *string `pulumi:"serial0"`
	Smbios1      *string `pulumi:"smbios1"`
	Sockets      *int    `pulumi:"sockets"`
	Sshkeys      *string `pulumi:"sshkeys"`
	Tablet       *int    `pulumi:"tablet"`
	Tags         *string `pulumi:"tags"`
	Template     *int    `pulumi:"template"`
	Tpmstate0    *string `pulumi:"tpmstate0"`
	Usb0         *string `pulumi:"usb0"`
	Vcpus        *int    `pulumi:"vcpus"`
	Vga          *string `pulumi:"vga"`
	VmId         *int    `pulumi:"vmId"`
}

// The set of arguments for constructing a VM resource.
type VMArgs struct {
	Acpi         pulumi.IntPtrInput
	Affinity     pulumi.StringPtrInput
	Agent        pulumi.StringPtrInput
	Audio0       pulumi.StringPtrInput
	Autostart    pulumi.IntPtrInput
	Balloon      pulumi.IntPtrInput
	Bios         pulumi.StringPtrInput
	Boot         pulumi.StringPtrInput
	Cicustom     pulumi.StringPtrInput
	Cipassword   pulumi.StringPtrInput
	Citype       pulumi.StringPtrInput
	Ciupgrade    pulumi.IntPtrInput
	Ciuser       pulumi.StringPtrInput
	Clone        ClonePtrInput
	Cores        pulumi.IntPtrInput
	Cpu          pulumi.StringPtrInput
	Cpulimit     pulumi.StringPtrInput
	Cpuunits     pulumi.IntPtrInput
	Description  pulumi.StringPtrInput
	Digest       pulumi.StringPtrInput
	Disks        DiskArrayInput
	Efidisk0     pulumi.StringPtrInput
	Hookscript   pulumi.StringPtrInput
	Hostpci0     pulumi.StringPtrInput
	Hotplug      pulumi.StringPtrInput
	Hugepages    pulumi.StringPtrInput
	Ipconfig0    pulumi.StringPtrInput
	Kvm          pulumi.IntPtrInput
	Lock         pulumi.StringPtrInput
	Machine      pulumi.StringPtrInput
	Memory       pulumi.IntPtrInput
	Name         pulumi.StringInput
	Nameserver   pulumi.StringPtrInput
	Net0         pulumi.StringPtrInput
	Node         pulumi.StringPtrInput
	Numa         pulumi.IntPtrInput
	Numa0        pulumi.StringPtrInput
	Onboot       pulumi.IntPtrInput
	Ostype       pulumi.StringPtrInput
	Parallel0    pulumi.StringPtrInput
	Protection   pulumi.IntPtrInput
	Rng0         pulumi.StringPtrInput
	Scsihw       pulumi.StringPtrInput
	Searchdomain pulumi.StringPtrInput
	Serial0      pulumi.StringPtrInput
	Smbios1      pulumi.StringPtrInput
	Sockets      pulumi.IntPtrInput
	Sshkeys      pulumi.StringPtrInput
	Tablet       pulumi.IntPtrInput
	Tags         pulumi.StringPtrInput
	Template     pulumi.IntPtrInput
	Tpmstate0    pulumi.StringPtrInput
	Usb0         pulumi.StringPtrInput
	Vcpus        pulumi.IntPtrInput
	Vga          pulumi.StringPtrInput
	VmId         pulumi.IntPtrInput
}

func (VMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmArgs)(nil)).Elem()
}

type VMInput interface {
	pulumi.Input

	ToVMOutput() VMOutput
	ToVMOutputWithContext(ctx context.Context) VMOutput
}

func (*VM) ElementType() reflect.Type {
	return reflect.TypeOf((**VM)(nil)).Elem()
}

func (i *VM) ToVMOutput() VMOutput {
	return i.ToVMOutputWithContext(context.Background())
}

func (i *VM) ToVMOutputWithContext(ctx context.Context) VMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMOutput)
}

// VMArrayInput is an input type that accepts VMArray and VMArrayOutput values.
// You can construct a concrete instance of `VMArrayInput` via:
//
//	VMArray{ VMArgs{...} }
type VMArrayInput interface {
	pulumi.Input

	ToVMArrayOutput() VMArrayOutput
	ToVMArrayOutputWithContext(context.Context) VMArrayOutput
}

type VMArray []VMInput

func (VMArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VM)(nil)).Elem()
}

func (i VMArray) ToVMArrayOutput() VMArrayOutput {
	return i.ToVMArrayOutputWithContext(context.Background())
}

func (i VMArray) ToVMArrayOutputWithContext(ctx context.Context) VMArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMArrayOutput)
}

// VMMapInput is an input type that accepts VMMap and VMMapOutput values.
// You can construct a concrete instance of `VMMapInput` via:
//
//	VMMap{ "key": VMArgs{...} }
type VMMapInput interface {
	pulumi.Input

	ToVMMapOutput() VMMapOutput
	ToVMMapOutputWithContext(context.Context) VMMapOutput
}

type VMMap map[string]VMInput

func (VMMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VM)(nil)).Elem()
}

func (i VMMap) ToVMMapOutput() VMMapOutput {
	return i.ToVMMapOutputWithContext(context.Background())
}

func (i VMMap) ToVMMapOutputWithContext(ctx context.Context) VMMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMMapOutput)
}

type VMOutput struct{ *pulumi.OutputState }

func (VMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VM)(nil)).Elem()
}

func (o VMOutput) ToVMOutput() VMOutput {
	return o
}

func (o VMOutput) ToVMOutputWithContext(ctx context.Context) VMOutput {
	return o
}

func (o VMOutput) Acpi() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Acpi }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Affinity }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Agent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Agent }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Audio0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Audio0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Autostart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Autostart }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Balloon() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Balloon }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Bios() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Bios }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Boot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Boot }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Cicustom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Cicustom }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Cipassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Cipassword }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Citype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Citype }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Ciupgrade() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Ciupgrade }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Ciuser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Ciuser }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Clone() ClonePtrOutput {
	return o.ApplyT(func(v *VM) ClonePtrOutput { return v.Clone }).(ClonePtrOutput)
}

func (o VMOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Cores }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Cpu }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Cpulimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Cpulimit }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Cpuunits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Cpuunits }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Disks() DiskArrayOutput {
	return o.ApplyT(func(v *VM) DiskArrayOutput { return v.Disks }).(DiskArrayOutput)
}

func (o VMOutput) Efidisk0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Efidisk0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Hookscript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Hookscript }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Hostpci0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Hostpci0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Hotplug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Hotplug }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Hugepages() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Hugepages }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Ipconfig0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Ipconfig0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Kvm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Kvm }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Lock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Lock }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Machine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Machine }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VM) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VMOutput) Nameserver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Nameserver }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Net0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Net0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Node }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Numa() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Numa }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Numa0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Numa0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Onboot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Onboot }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Ostype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Ostype }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Parallel0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Parallel0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Protection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Protection }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Rng0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Rng0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Scsihw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Scsihw }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Searchdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Searchdomain }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Serial0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Serial0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Smbios1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Smbios1 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Sockets }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Sshkeys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Sshkeys }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Tablet() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Tablet }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Tags }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Template() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Template }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Tpmstate0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Tpmstate0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Usb0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Usb0 }).(pulumi.StringPtrOutput)
}

func (o VMOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.Vcpus }).(pulumi.IntPtrOutput)
}

func (o VMOutput) Vga() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.StringPtrOutput { return v.Vga }).(pulumi.StringPtrOutput)
}

func (o VMOutput) VmId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VM) pulumi.IntPtrOutput { return v.VmId }).(pulumi.IntPtrOutput)
}

type VMArrayOutput struct{ *pulumi.OutputState }

func (VMArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VM)(nil)).Elem()
}

func (o VMArrayOutput) ToVMArrayOutput() VMArrayOutput {
	return o
}

func (o VMArrayOutput) ToVMArrayOutputWithContext(ctx context.Context) VMArrayOutput {
	return o
}

func (o VMArrayOutput) Index(i pulumi.IntInput) VMOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VM {
		return vs[0].([]*VM)[vs[1].(int)]
	}).(VMOutput)
}

type VMMapOutput struct{ *pulumi.OutputState }

func (VMMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VM)(nil)).Elem()
}

func (o VMMapOutput) ToVMMapOutput() VMMapOutput {
	return o
}

func (o VMMapOutput) ToVMMapOutputWithContext(ctx context.Context) VMMapOutput {
	return o
}

func (o VMMapOutput) MapIndex(k pulumi.StringInput) VMOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VM {
		return vs[0].(map[string]*VM)[vs[1].(string)]
	}).(VMOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMInput)(nil)).Elem(), &VM{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMArrayInput)(nil)).Elem(), VMArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMMapInput)(nil)).Elem(), VMMap{})
	pulumi.RegisterOutputType(VMOutput{})
	pulumi.RegisterOutputType(VMArrayOutput{})
	pulumi.RegisterOutputType(VMMapOutput{})
}
