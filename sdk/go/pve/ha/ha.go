// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ha

import (
	"context"
	"reflect"

	"errors"
	"github.com/hctamu/pulumi-pve/sdk/go/pve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Proxmox HA resource that manages the HA configuration of a virtual machine in the Proxmox VE.
type Ha struct {
	pulumi.CustomResourceState

	// The HA group identifier.
	Group pulumi.StringPtrOutput `pulumi:"group"`
	// The ID of the virtual machine that will be managed by HA (required).
	ResourceId pulumi.IntOutput `pulumi:"resourceId"`
	// The state of the HA resource (default: started).
	State pulumi.StringPtrOutput `pulumi:"state"`
}

// NewHa registers a new resource with the given unique name, arguments, and options.
func NewHa(ctx *pulumi.Context,
	name string, args *HaArgs, opts ...pulumi.ResourceOption) (*Ha, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.State == nil {
		args.State = pulumi.StringPtr("started")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ha
	err := ctx.RegisterResource("pve:ha:Ha", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHa gets an existing Ha resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HaState, opts ...pulumi.ResourceOption) (*Ha, error) {
	var resource Ha
	err := ctx.ReadResource("pve:ha:Ha", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ha resources.
type haState struct {
}

type HaState struct {
}

func (HaState) ElementType() reflect.Type {
	return reflect.TypeOf((*haState)(nil)).Elem()
}

type haArgs struct {
	// The HA group identifier.
	Group *string `pulumi:"group"`
	// The ID of the virtual machine that will be managed by HA (required).
	ResourceId int `pulumi:"resourceId"`
	// The state of the HA resource (default: started).
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a Ha resource.
type HaArgs struct {
	// The HA group identifier.
	Group pulumi.StringPtrInput
	// The ID of the virtual machine that will be managed by HA (required).
	ResourceId pulumi.IntInput
	// The state of the HA resource (default: started).
	State pulumi.StringPtrInput
}

func (HaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*haArgs)(nil)).Elem()
}

type HaInput interface {
	pulumi.Input

	ToHaOutput() HaOutput
	ToHaOutputWithContext(ctx context.Context) HaOutput
}

func (*Ha) ElementType() reflect.Type {
	return reflect.TypeOf((**Ha)(nil)).Elem()
}

func (i *Ha) ToHaOutput() HaOutput {
	return i.ToHaOutputWithContext(context.Background())
}

func (i *Ha) ToHaOutputWithContext(ctx context.Context) HaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaOutput)
}

// HaArrayInput is an input type that accepts HaArray and HaArrayOutput values.
// You can construct a concrete instance of `HaArrayInput` via:
//
//	HaArray{ HaArgs{...} }
type HaArrayInput interface {
	pulumi.Input

	ToHaArrayOutput() HaArrayOutput
	ToHaArrayOutputWithContext(context.Context) HaArrayOutput
}

type HaArray []HaInput

func (HaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ha)(nil)).Elem()
}

func (i HaArray) ToHaArrayOutput() HaArrayOutput {
	return i.ToHaArrayOutputWithContext(context.Background())
}

func (i HaArray) ToHaArrayOutputWithContext(ctx context.Context) HaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaArrayOutput)
}

// HaMapInput is an input type that accepts HaMap and HaMapOutput values.
// You can construct a concrete instance of `HaMapInput` via:
//
//	HaMap{ "key": HaArgs{...} }
type HaMapInput interface {
	pulumi.Input

	ToHaMapOutput() HaMapOutput
	ToHaMapOutputWithContext(context.Context) HaMapOutput
}

type HaMap map[string]HaInput

func (HaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ha)(nil)).Elem()
}

func (i HaMap) ToHaMapOutput() HaMapOutput {
	return i.ToHaMapOutputWithContext(context.Background())
}

func (i HaMap) ToHaMapOutputWithContext(ctx context.Context) HaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaMapOutput)
}

type HaOutput struct{ *pulumi.OutputState }

func (HaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ha)(nil)).Elem()
}

func (o HaOutput) ToHaOutput() HaOutput {
	return o
}

func (o HaOutput) ToHaOutputWithContext(ctx context.Context) HaOutput {
	return o
}

// The HA group identifier.
func (o HaOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ha) pulumi.StringPtrOutput { return v.Group }).(pulumi.StringPtrOutput)
}

// The ID of the virtual machine that will be managed by HA (required).
func (o HaOutput) ResourceId() pulumi.IntOutput {
	return o.ApplyT(func(v *Ha) pulumi.IntOutput { return v.ResourceId }).(pulumi.IntOutput)
}

// The state of the HA resource (default: started).
func (o HaOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ha) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

type HaArrayOutput struct{ *pulumi.OutputState }

func (HaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ha)(nil)).Elem()
}

func (o HaArrayOutput) ToHaArrayOutput() HaArrayOutput {
	return o
}

func (o HaArrayOutput) ToHaArrayOutputWithContext(ctx context.Context) HaArrayOutput {
	return o
}

func (o HaArrayOutput) Index(i pulumi.IntInput) HaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ha {
		return vs[0].([]*Ha)[vs[1].(int)]
	}).(HaOutput)
}

type HaMapOutput struct{ *pulumi.OutputState }

func (HaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ha)(nil)).Elem()
}

func (o HaMapOutput) ToHaMapOutput() HaMapOutput {
	return o
}

func (o HaMapOutput) ToHaMapOutputWithContext(ctx context.Context) HaMapOutput {
	return o
}

func (o HaMapOutput) MapIndex(k pulumi.StringInput) HaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ha {
		return vs[0].(map[string]*Ha)[vs[1].(string)]
	}).(HaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HaInput)(nil)).Elem(), &Ha{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaArrayInput)(nil)).Elem(), HaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaMapInput)(nil)).Elem(), HaMap{})
	pulumi.RegisterOutputType(HaOutput{})
	pulumi.RegisterOutputType(HaArrayOutput{})
	pulumi.RegisterOutputType(HaMapOutput{})
}
