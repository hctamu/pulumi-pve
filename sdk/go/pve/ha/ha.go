// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.siemens.cloud/umatch/pulumi-pve/sdk/go/pve/internal"
)

// A Proxmox HA resource that manages the HA configuration of a virtual machine in the Proxmox VE.
type Ha struct {
	pulumi.CustomResourceState

	// The HA group identifier.
	Group pulumix.Output[*string] `pulumi:"group"`
	// The ID of the virtual machine that will be managed by HA (required).
	ResourceId pulumix.Output[int] `pulumi:"resourceId"`
	// The state of the HA resource (default: started).
	State pulumix.Output[*string] `pulumi:"state"`
}

// NewHa registers a new resource with the given unique name, arguments, and options.
func NewHa(ctx *pulumi.Context,
	name string, args *HaArgs, opts ...pulumi.ResourceOption) (*Ha, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.State == nil {
		args.State = pulumix.Ptr("started")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ha
	err := ctx.RegisterResource("pve:ha:Ha", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHa gets an existing Ha resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HaState, opts ...pulumi.ResourceOption) (*Ha, error) {
	var resource Ha
	err := ctx.ReadResource("pve:ha:Ha", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ha resources.
type haState struct {
}

type HaState struct {
}

func (HaState) ElementType() reflect.Type {
	return reflect.TypeOf((*haState)(nil)).Elem()
}

type haArgs struct {
	// The HA group identifier.
	Group *string `pulumi:"group"`
	// The ID of the virtual machine that will be managed by HA (required).
	ResourceId int `pulumi:"resourceId"`
	// The state of the HA resource (default: started).
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a Ha resource.
type HaArgs struct {
	// The HA group identifier.
	Group pulumix.Input[*string]
	// The ID of the virtual machine that will be managed by HA (required).
	ResourceId pulumix.Input[int]
	// The state of the HA resource (default: started).
	State pulumix.Input[*string]
}

func (HaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*haArgs)(nil)).Elem()
}

type HaOutput struct{ *pulumi.OutputState }

func (HaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ha)(nil)).Elem()
}

func (o HaOutput) ToHaOutput() HaOutput {
	return o
}

func (o HaOutput) ToHaOutputWithContext(ctx context.Context) HaOutput {
	return o
}

func (o HaOutput) ToOutput(ctx context.Context) pulumix.Output[Ha] {
	return pulumix.Output[Ha]{
		OutputState: o.OutputState,
	}
}

// The HA group identifier.
func (o HaOutput) Group() pulumix.Output[*string] {
	value := pulumix.Apply[Ha](o, func(v Ha) pulumix.Output[*string] { return v.Group })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the virtual machine that will be managed by HA (required).
func (o HaOutput) ResourceId() pulumix.Output[int] {
	value := pulumix.Apply[Ha](o, func(v Ha) pulumix.Output[int] { return v.ResourceId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The state of the HA resource (default: started).
func (o HaOutput) State() pulumix.Output[*string] {
	value := pulumix.Apply[Ha](o, func(v Ha) pulumix.Output[*string] { return v.State })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(HaOutput{})
}
